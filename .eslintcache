[{"/home/boka18/react-movies-database/src/index.js":"1","/home/boka18/react-movies-database/src/App.js":"2","/home/boka18/react-movies-database/src/Auth.js":"3","/home/boka18/react-movies-database/src/redux/reducer.js":"4","/home/boka18/react-movies-database/src/redux/actions.js":"5","/home/boka18/react-movies-database/src/Table.js":"6","/home/boka18/react-movies-database/src/SignInCard.js":"7","/home/boka18/react-movies-database/src/Navigation.js":"8","/home/boka18/react-movies-database/src/Spinner/Spinner.js":"9","/home/boka18/react-movies-database/src/redux/types.js":"10","/home/boka18/react-movies-database/src/TableHeader.js":"11","/home/boka18/react-movies-database/src/TableData.js":"12","/home/boka18/react-movies-database/src/Pagination.js":"13","/home/boka18/react-movies-database/src/PerPageSelector.js":"14"},{"size":1097,"mtime":1611689865780,"results":"15","hashOfConfig":"16"},{"size":2550,"mtime":1611689865780,"results":"17","hashOfConfig":"16"},{"size":925,"mtime":1611689865780,"results":"18","hashOfConfig":"16"},{"size":11358,"mtime":1611689865780,"results":"19","hashOfConfig":"16"},{"size":2662,"mtime":1611689865780,"results":"20","hashOfConfig":"16"},{"size":4365,"mtime":1611689865780,"results":"21","hashOfConfig":"16"},{"size":6715,"mtime":1611689865780,"results":"22","hashOfConfig":"16"},{"size":3193,"mtime":1611689865780,"results":"23","hashOfConfig":"16"},{"size":152,"mtime":1611689865780,"results":"24","hashOfConfig":"16"},{"size":512,"mtime":1611689865780,"results":"25","hashOfConfig":"16"},{"size":1588,"mtime":1611689865780,"results":"26","hashOfConfig":"16"},{"size":3982,"mtime":1611689865780,"results":"27","hashOfConfig":"16"},{"size":2399,"mtime":1611689865780,"results":"28","hashOfConfig":"16"},{"size":1389,"mtime":1611689865780,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"976gwc",{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"32"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"32"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/home/boka18/react-movies-database/src/index.js",[],["67","68"],"/home/boka18/react-movies-database/src/App.js",["69","70","71","72"],"import React, {useEffect, useState} from 'react';\nimport {connect} from 'react-redux';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Spinner from './Spinner/Spinner'\nimport Table from './Table';\nimport Navigation from './Navigation'\nimport {getMovies} from './redux/actions'\nimport './App.css';\n\n\nconst App = (props) => {\n\n  const [movies, setMovies] = useState(props.mov)   \n  const [loading, setLoading] = useState(props.loading)\n  let [isLoggedIn, setIsLoggedIn] = useState(false)\n\n  useEffect(() => {\n    props.getMovies()\n  },[])\n  \n\n    // useEffect(() => {\n    //   if (typeof props.filtered !== \"undefined\"){\n    //   setMovies(props.filtered)}\n    // }, [props.filtered])\n    // useEffect(() => {\n    //   if (typeof props.filtered === \"undefined\"){\n    //   setMovies(props.mov)}\n    // }, [props.mov])\n  // useEffect(() => {\n  //   setMovies(props.mov)\n  // }, [props.mov])\n  // useEffect(() => {\n  //   setMovies(props.filtered)\n  // }, [props.filtered])\n//   const load = _ => {\n//     if(localStorage.isAuth){\n//       axios.get('https://react-movies-database-default-rtdb.firebaseio.com/' + localStorage.userId + '.json').then(response => {\n//       console.log(response.data)\n//       localStorage.setItem('firstName', response.data[122])\n//       let movies=[...response.data]\n//       setMovies(movies.slice(0,122))\n//       setLoading(false)\n//     })\n//     .catch(error => console.log(error))\n// }\n\n// else {\n//       axios.get('https://react-movies-database-default-rtdb.firebaseio.com/Table.json').then(response => {\n//       console.log(response.data)\n//       setMovies(response.data)\n//       setLoading(false)\n//     })\n//     .catch(error => console.log(error))\n// }\n//     }\nif (props.loading) {\n   return <Spinner/>\n }\nconsole.warn = console.error = () => {};\n      return (\n      <div style={{ \n       // backgroundSize: 'cover',\n        //backgroundImage: `url(\"https://i.pinimg.com/originals/29/b4/f3/29b4f3a261a2b212f7a831f31940f1ad.jpg\")` \n      }}>\n          <Navigation \n            movies={movies}\n            setMovies={setMovies}\n            isLoggedIn={isLoggedIn}\n            setIsLoggedIn={setIsLoggedIn}\n          />\n          <Table \n            movies={movies}\n            setMovies={setMovies}/>\n      </div>\n      )}\n\n      const mapStateToProps  = (state) => (\n        {mov: state.movies,\n        loading: state.loading,\n        filtered: state.filteredMovies,\n        searching: state.searching\n        })\n\nexport default connect(mapStateToProps, {getMovies})(App);","/home/boka18/react-movies-database/src/Auth.js",["73"],"import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Navigation from './Navigation';\nimport SignInCard from './SignInCard';\n\nconst Auth = (props) => {\n\nlet [isAuth, setIsAuth] = useState(false)\nconst [loading, setLoading] = useState(true)\nlet [authMovies, setAuthMovies] = useState()\n\nuseEffect(() => {\n  load();\n}, [])\nconst load = _ => {\n    axios.get('https://react-movies-database-default-rtdb.firebaseio.com/Table.json').then(response => {\n    console.log(response.data)\n    setAuthMovies(response.data.map((obj, index)=> ({ ...obj, ranked: index+1 })))\n    setLoading(false)\n  })\n  .catch(error => console.log(error))\n}\n  \nreturn (\n  <div>\n    <Navigation \n    isAuth={isAuth}\n    setIsAuth={setIsAuth}\n    />\n    <SignInCard \n    movies={authMovies}\n    isAuth={isAuth}\n    setIsAuth={setIsAuth}\n    />\n   </div>\n)}\n\n\nexport default Auth;","/home/boka18/react-movies-database/src/redux/reducer.js",["74","75","76","77"],"import {GET_MOVIES, WATCHED, NOT_WATCHED, FILTER_BY_VALUE, DATABASE_SET, SORT_BY, LOAD_DATA, LOAD_EXACT_PAGE, MOVIES_PER_PAGE} from './types'\nimport firebase from 'firebase';\nimport update from 'immutability-helper'\n\nvar config = {\n    apiKey: \"apiKey\",\n    authDomain: \"react-movies-database.firebaseapp.com\",\n    databaseURL: \"https://react-movies-database-default-rtdb.firebaseio.com/\",\n    storageBucket: \"bucket.appspot.com\"\n  };\n  let path = localStorage.userId\n  \nif (firebase.apps.length === 0) {\n    firebase.initializeApp(config);\n  }\n\nconst initialState = {\n    movies:[],\n    searching: false,\n    currentPage: 1,\n    countPerPage: '',\n    loading:true,\n    firstName:'',\n    appliedFilters: []\n}\n\nexport default function(state = initialState, action){\n    switch(action.type){\n        case GET_MOVIES:\n            let count = action.payload.count;\n            let countPerPage = action.payload.countPerPage || 10.\n            let totalPages = Math.ceil(count / countPerPage);\n            let movies=action.payload.data\n        return {\n            ...state,\n            movies,\n            firstName: action.payload.firstName,\n            filteredMovies: movies.slice(0, countPerPage),\n            currentCount: countPerPage,\n            countPerPage,\n            totalCount: count,\n            currentPage: 1,\n            totalPages: totalPages,\n            filteredPages: totalPages,\n            loading:false,\n        }\n        case WATCHED:\n            if(!state.searching){\n                return update(state, {\n                    movies:{\n                      [action.payload]:{\n                          watched: {$set: true}\n                      }\n                    },\n                 loading: {$set: false}\n                 }\n                 )\n            }\n         else if (state.searching && (state.movies.ranked === state.filteredMovies.ranked)){\n            return update(state, {\n                movies:{\n                  [action.ranked -1]:{\n                      watched: {$set: true}\n                  }\n                },\n                filteredMovies: {\n                    [action.payload]:{\n                        watched: {$set: true}\n                    }\n                  }\n             })\n            }\n        case NOT_WATCHED:\n            if(!state.searching){\n                return update(state, {\n                    movies:{\n                      [action.payload]:{\n                          watched: {$set: false}\n                      }\n                    },\n                 loading: {$set: false}\n                 }\n                 )\n            }\n         else if (state.searching && (state.movies.ranked === state.filteredMovies.ranked)){\n            return update(state, {\n                movies:{\n                  [action.ranked -1]:{\n                      watched: {$set: false}\n                  }\n                },\n                filteredMovies: {\n                    [action.payload]:{\n                        watched: {$set: false}\n                    }\n                  }\n             })\n            }\n            case DATABASE_SET:\n               databaseSet(state.movies)\n            return {\n                ...state,\n            }\n            case FILTER_BY_VALUE:\n            let newState = Object.assign({}, state);\n            let value = action.payload.value;\n            let filteredValues = state.movies.filter(movie => {\n                return movie.originalTitle.toLowerCase().includes(value) \n                \n            });\n            let appliedFilters = state.appliedFilters;\n            if (value) {\n                newState.searching = true\n                appliedFilters = addFilterIfNotExists(FILTER_BY_VALUE, appliedFilters);\n                newState.filteredMovies = filteredValues;\n                newState.filteredCount = newState.filteredMovies.length;\n                newState.filteredPages = Math.ceil(newState.filteredCount / newState.countPerPage);\n            } else {\n                newState.searching = false\n                appliedFilters = removeFilter(FILTER_BY_VALUE, appliedFilters);\n                if (appliedFilters.length === 0) {\n                    newState.filteredMovies = newState.movies;\n                    newState.filteredCount = newState.filteredMovies.length;\n                    newState.filteredPages = Math.ceil(newState.filteredCount / newState.countPerPage);\n                }\n            }\n            return newState;\n        case SORT_BY:\n            if(!state.searching){\n            console.log(action)\n            const sortByAlphabetState = Object.assign({}, state);\n            let sortedAlphabetArr = action.order ?\n                sortAsc(state.movies, action.payload) :\n                sortDesc(state.movies, action.payload);\n                sortByAlphabetState.filteredMovies = sortedAlphabetArr;\n                sortByAlphabetState.appliedFilters = addFilterIfNotExists(SORT_BY, sortByAlphabetState.appliedFilters);\n                sortByAlphabetState.appliedFilters = removeFilter(SORT_BY, sortByAlphabetState.appliedFilters);\n                sortByAlphabetState.currentPage=1\n                sortByAlphabetState.currentCount=sortByAlphabetState.totalCount\n                sortByAlphabetState.filteredPages=Math.ceil(sortByAlphabetState.currentCount /  sortByAlphabetState.countPerPage)\n                sortByAlphabetState.totalPages=sortByAlphabetState.filteredPages\n                let currentPageSort =sortByAlphabetState.currentPage\n                let upperCountSort = sortByAlphabetState.countPerPage * currentPageSort\n                let lowerCountSort = upperCountSort - sortByAlphabetState.countPerPage;\n                let exactSort = sortByAlphabetState.movies.slice(lowerCountSort, upperCountSort);\n                sortByAlphabetState.filteredMovies = exactSort;\n                sortByAlphabetState.currentCount = upperCountSort;\n                sortByAlphabetState.currentPage = exactSort;\n            console.log(sortByAlphabetState)\n            return sortByAlphabetState;  \n            }\n            else {\n                const sortByAlphabetState = Object.assign({}, state);\n            let sortedAlphabetArr = action.order ?\n                sortAsc(state.filteredMovies, action.payload) :\n                sortDesc(state.filteredMovies, action.payload);\n\n                sortByAlphabetState.filteredMovies = sortedAlphabetArr;\n                sortByAlphabetState.appliedFilters = addFilterIfNotExists(SORT_BY, sortByAlphabetState.appliedFilters);\n                sortByAlphabetState.appliedFilters = removeFilter(SORT_BY, sortByAlphabetState.appliedFilters);\n\n            return sortByAlphabetState;  \n            }\n        // case LOAD_NEW_PAGE:\n        //     //Clone the previous state\n        //     let loadNewPageState = Object.assign({}, state);\n        //     //How many pages should be added. Will always be 1 or -1\n        //     let addPages = action.payload.page;\n        //     //add it to the current\n        //     loadNewPageState.currentPage += addPages;\n\n        //     let perPage = loadNewPageState.countPerPage; //20 by default\n\n        //     let nextProducts;\n        //     if (addPages === 1){\n        //         //Moving from page 1 to 2 will cause ‘upperCount’ to be 40\n        //         let upperCount = loadNewPageState.currentCount + perPage;\n        //         let lowerCount = loadNewPageState.currentCount; //This hasn’t been changed. It will remain 20.\n\n        //         loadNewPageState.currentCount += loadNewPageState.countPerPage;\n        //         nextProducts = loadNewPageState.products.slice(lowerCount, upperCount);\n        //     }\n\n        //     if (addPages ===-1){\n        //         let upperCount = loadNewPageState.currentCount; //40\n        //         let lowerCount = loadNewPageState.currentCount - perPage; //20\n\n        //         loadNewPageState.currentCount -= loadNewPageState.countPerPage;\n        //         nextProducts = loadNewPageState.products.slice(lowerCount - perPage, upperCount - perPage);\n        //     }\n\n        //     loadNewPageState.filteredProducts = nextProducts;\n        //     // Don't use window.history.pushState() here in production\n        //     // It's better to keep redirections predictable\n        //     window.history.pushState({page: 1}, \"title 1\", `?page=${loadNewPageState.currentPage}`);\n\n        //     return loadNewPageState;\n\n        case LOAD_EXACT_PAGE:\n            const exactPageState = Object.assign({}, state);\n            const exactPage = action.payload;\n            let upperCountExact = exactPageState.countPerPage * exactPage\n            let lowerCountExact = upperCountExact - exactPageState.countPerPage;\n            let exactMovies = exactPageState.movies.slice(lowerCountExact, upperCountExact);\n            exactPageState.filteredMovies = exactMovies;\n            exactPageState.currentCount = upperCountExact;\n            exactPageState.currentPage = exactPage;\n            window.history.pushState({page: 1}, \"title 1\", `?page=${exactPageState.currentPage}`);\n            return exactPageState;\n\n        case MOVIES_PER_PAGE:\n\n            const moviesPerPageState = Object.assign({}, state)\n            moviesPerPageState.currentPage=1\n            moviesPerPageState.countPerPage=action.payload\n            moviesPerPageState.currentCount=moviesPerPageState.totalCount\n            moviesPerPageState.filteredPages=Math.ceil(moviesPerPageState.currentCount /  moviesPerPageState.countPerPage)\n            moviesPerPageState.totalPages=moviesPerPageState.filteredPages\n            let currentPageMPP =moviesPerPageState.currentPage\n            let upperCountMPP = moviesPerPageState.countPerPage * currentPageMPP\n            let lowerCountMPP = upperCountMPP - moviesPerPageState.countPerPage;\n            let exactMPP = moviesPerPageState.movies.slice(lowerCountMPP, upperCountMPP);\n            moviesPerPageState.filteredMovies = exactMPP;\n            moviesPerPageState.currentCount = upperCountMPP;\n            moviesPerPageState.currentPage = exactMPP;\n            return moviesPerPageState\n\n        default: return state\n    }\n}\n\nfunction addFilterIfNotExists(filter, appliedFilters) {\n    let index = appliedFilters.indexOf(filter);\n    if (index===-1) appliedFilters.push(filter);\n\n    return appliedFilters;\n}\n\nfunction removeFilter(filter, appliedFilters) {\n    let index = appliedFilters.indexOf(filter);\n    appliedFilters.splice(index, 1);\n    return appliedFilters;\n}\n\nfunction databaseSet(movies){\n    return firebase.database().ref(path +\"/\").update(movies)\n}\n\nfunction sortAsc(arr, field) {\n   return arr.sort(function (a, b) {\n       if (a[field] > b[field]) {\n           return 1;\n       }\n       if (b[field]> a[field]) {\n           return -1;\n       }\n       return 0;\n   })\n}\n\nfunction sortDesc(arr, field) {\n    return arr.sort(function (a, b) {\n        if (a[field] > b[field]) return -1;\n\n        if (b[field]> a[field]) return 1;\n\n        return 0;\n    })\n}\n            //for updating only one object \n\n            // return state.movies.map((movie, index) =>{\n            //    if (index ===action.payload){\n            //        console.log(movie)\n            //         return {\n            //             ...movie,\n            //             movie: movie.watched=true\n            //         }\n            //     }\n            // })","/home/boka18/react-movies-database/src/redux/actions.js",[],"/home/boka18/react-movies-database/src/Table.js",["78","79","80","81","82","83","84","85"],"import React, {useEffect, useState} from 'react'\nimport axios from 'axios'\nimport TableData from './TableData';\nimport TableHeader from './TableHeader.js';\nimport Navigation from './Navigation.js'\nimport PerPageSelector from './PerPageSelector';\nimport Pagination from './Pagination';\nimport Spinner from './Spinner/Spinner';\nimport {connect} from 'react-redux';\nimport './Table.css'\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport firebase from 'firebase';\n\n\nconst Table = (props) => {\n  const [loading, setLoading] = useState(false)\n  const [moviesData, setMoviesData] = useState(props.mov)\n  const [currentPage, setCurrentPage] = useState(1)\n  const [postsPerPage, setPostsPerPage] = useState(10)\n  const [ascending, setAscending] = useState(true)\n\n  console.warn = console.error = () => {};\n  var config = {\n    apiKey: \"apiKey\",\n    authDomain: \"react-movies-database.firebaseapp.com\",\n    databaseURL: \"https://react-movies-database-default-rtdb.firebaseio.com/\",\n    storageBucket: \"bucket.appspot.com\"\n  };\n\n  if (firebase.apps.length === 0) {\n    firebase.initializeApp(config);\n  }\n\n  // const load = _ => {\n  //     setMovies(currentPosts)\n  // }\n//   useEffect(() => {\n//      setMoviesData(props.movies);\n//  }, [props.movies])\n// useEffect(() => {\n//   if (props.searching){\n//     setMoviesData(props.filtered)}\n// }, [props.filtered])\n\n//  useEffect(() => {\n//   if (!props.searching){\n//   setMoviesData(props.movies)};\n// }, [props.movies])\n  \n  // useEffect(() => {\n  //   setCurrentPage(1);\n  // }, [postsPerPage])\n  \n  if (props.loading) {\n    return <Spinner/>\n  }\n    // const onHeaderClick = headerName => {\n    //   props.setMovies(sort(headerName))\n    // }\n  \n    // const sort = param => {\n    //   if(ascending){\n    //     setAscending(false)\n    //     return [].concat(props.movies)\n    //     .sort((a, b) => a[param] < b[param] ? 1 : -1)\n    //     .map((item, i) => \n    //         item\n    //     );\n    //   }\n    //   else {\n    //     setAscending(true)\n    //     return [].concat(props.movies)\n    //     .sort((a, b) => a[param] > b[param] ? 1 : -1)\n    //     .map((item, i) => \n    //         item\n    //     );\n    //   }\n    // }\n    \n    const indexOfLastPost = props.currentCount\n    console.log(['moviesData'], props.currentPage)\n    console.log(['moviesData'], indexOfLastPost)\n\n    const indexOfFirstPost = indexOfLastPost - props.countPerPage\n    console.log(['moviesData'], props.countPerPage)\n    console.log(['moviesData'], props.currentCount)\n\n    //const currentPosts = moviesData.slice(indexOfFirstPost, indexOfLastPost)\n    // console.log(['moviesData'], indexOfLastPost)\n    // console.log(['moviesData'], indexOfFirstPost)\n    // console.log(['moviesData'], currentPosts)\n    // const paginate = pageNumber => \n    // {\n      //setCurrentPage(pageNumber)\n      //setcurr(postsPerPage)\n    //}\n    return (     \n        <div class='Wrapper'>\n        {loading ? <Spinner /> : null} \n        <table class={\"table table-bordered text-center\"}>\n          <thead class=\"thead-dark\">\n            <TableHeader\n              movies={moviesData}\n              setMovies={props.setMovies}\n             />\n          </thead>\n           <tbody>\n            <TableData\n            indexOfFirstPost={indexOfFirstPost}\n            indexOfLastPost={indexOfLastPost}\n            movies={moviesData}\n            setMovies={setMoviesData}\n            pageSize={postsPerPage}\n            />\n           </tbody>\n        </table>\n          <Pagination\n          movies={moviesData}\n          postsPerPage={postsPerPage}\n          totalPosts={moviesData.length}\n          //paginate={paginate}\n          />\n          <PerPageSelector \n          postsPerPage={postsPerPage}\n          setPostsPerPage={setPostsPerPage}\n          movies={moviesData}\n          setMovies={props.setMoviesData}\n          />\n     </div>\n      )\n}\nconst mapStateToProps = state => {\n  return {\n      state: state,\n      mov:state.movies,\n      loading: state.loading,\n      filtered: state.filteredMovies,\n      searching: state.searching,\n      countPerPage: state.countPerPage,\n      currentCount: state.currentCount,\n      currentPage: state.currentPage,\n      filteredPages: state.filteredPages,\n      totalCount: state.totalCount,\n      totalPages: state.totalPages,\n  }\n}\n\nexport default connect(mapStateToProps)(Table);","/home/boka18/react-movies-database/src/SignInCard.js",[],"/home/boka18/react-movies-database/src/Navigation.js",["86","87","88","89","90","91","92","93","94","95"],"import React, {useState, useEffect} from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useHistory, BrowserRouter, Route, Switch, Redirect  } from 'react-router-dom';\nimport axios from 'axios';\nimport {connect} from 'react-redux';\nimport {filterByValue} from './redux/actions'\n\n\nconst Navigation = (props) => {\n  let [keyword, setKeyword] = useState(\"\")\n  let [newData, setNewData] = useState(props.mov)\n  let history = useHistory()\n  let isSignUp = props.isAuth\n  let [isAuth, setIsAuth] = useState(localStorage.isAuth)\n  //  const load = _ => {\n  //   if(localStorage.isAuth){\n  //     axios.get('https://react-movies-database-default-rtdb.firebaseio.com/' + localStorage.userId + '.json').then(response => {\n  //     setNewData(response.data)\n  //   }).catch(error => console.log(error))\n  // }\n  // else {\n  //   axios.get('https://react-movies-database-default-rtdb.firebaseio.com/Table.json').then(response => {\n  //     setNewData(response.data)\n  //   }).catch(error => console.log(error))\n  // }\n  //  }\n  useEffect(() => {\n    setNewData(props.movies);\n  }, [keyword])\n\n  const filterByInput = (e) =>{\n    let input = e.target.value\n    props.dispatch(filterByValue({value: input}))\n  }\n  //   setKeyword(event.target.value)\n  //   props.setMovies(newData.filter(entry => Object.values(entry).some(val => typeof val === \"string\" && val.toLocaleLowerCase().includes(event.target.value.toLocaleLowerCase()))));\n  // }\n  let searchBar = isAuth ?  (\n  <form class=\"form-inline\">\n    <input \n    class=\"form-control mr-sm-2\" \n    aria-label=\"Search\"\n    type=\"text\"\n    placeholder=\"Search Title...\"\n    onChange={(e) => filterByInput(e)}\n    />\n  </form>) : null\n\n  let table = isAuth ? \n  (<li class=\"nav-item\">\n  <a class=\"nav-link\" href=\"/table\">Table</a>\n  </li>) : null\n\n  const onLoginHandler = () => {\n    history.push('/auth')\n  }\n\n  const onLogoutHandler = () => {\n    localStorage.removeItem('expirationDate') \n    localStorage.removeItem('userId') \n    localStorage.removeItem('token') \n    localStorage.removeItem('isAuth')\n    history.push('/auth')\n  }\n\n  let loginButton = !localStorage.isAuth ?\n    <button \n    type=\"button\" \n    class=\"btn btn-outline-success\"\n    href=\"/auth\"\n    onClick={onLoginHandler}\n    > Login </button> : null\n\n  let logoutButton =\n    <button \n    type=\"button\" \n    class=\"btn btn-outline-secondary\"\n    href=\"/\"\n    onClick={onLogoutHandler}\n    >Logout</button>\n\n   \n\nreturn (\n<nav class=\"navbar sticky-top navbar-expand navbar-light bg-light\">\n  <a class=\"navbar-brand\" href=\"/\">{isAuth ? 'Hi ' + props.firstName : 'RMD'}</a>\n  <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n    <ul class=\"navbar-nav mr-auto\">\n      <li class=\"nav-item active\">\n        <a class=\"nav-link\" href=\"/\">Home <span class=\"sr-only\">(current)</span></a>\n      </li>\n      <li class=\"nav-item active\">\n      {table}\n      </li>\n    </ul>\n    <form class=\"form-inline my-2\">\n    {isAuth ? searchBar : null}\n    {isAuth ? logoutButton : loginButton}\n    </form>\n  </div>\n</nav>\n)}\n\n\nconst mapStateToProps  = (state) => ({\n  mov: state.movies,\n  firstName: state.firstName\n})\n\nexport default connect(mapStateToProps)(Navigation)\n","/home/boka18/react-movies-database/src/Spinner/Spinner.js",[],"/home/boka18/react-movies-database/src/redux/types.js",[],"/home/boka18/react-movies-database/src/TableHeader.js",["96"],"import React, {useState} from 'react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {connect} from 'react-redux'\n\nconst TableHeader = (props) => {\n   let [isAuth, setIsAuth] = useState(localStorage.isAuth)\n   const [order, setOrder] = useState(true)\n   let header =  [\n      {originalName: \"ranked\", name: \"Ranked\"},\n      {originalName: \"imdbRating\", name:\"IMDB Rating\"},\n      {originalName: \"originalTitle\", name:\"Title\"},\n      {originalName: \"year\", name: \"Year\"}];\n     \n     const sortByInput = (item) =>{\n         props.sortBy(item, order)\n         setOrder(!order)\n      }\n\n   if(isAuth) {\n      header =  [\n         {originalName: \"ranked\", name: \"Ranked\"},\n         {originalName: \"imdbRating\", name:\"IMDB Rating\"},\n         {originalName: \"originalTitle\", name:\"Title\"},\n         {originalName: \"year\", name: \"Year\"},\n         {originalName: \"watched\", name: \"Watched\"}]\n      }\n\n   return header.map((item, index) => {\n      return <th class=\"align-middle\" key={index}>\n         <span onClick={() => sortByInput(item.originalName)}>{item.name}</span>\n         {/* {item.originalName === 'Watched' ? <FilterSelectorTest\n                                 movies={props.movies}\n                                 setMovies={props.setMovies}\n         /> : null} */}\n         </th>\n   })\n}\n\nconst mapDispatchToProps = dispatch =>{\n   return {\n      sortBy: (item, order) =>{\n      console.log(item, order)\n      dispatch({\n         type: 'SORT_BY',\n         payload: item,\n         order: order\n      })}\n   } \n}\n\nexport default connect(null, mapDispatchToProps)(TableHeader)","/home/boka18/react-movies-database/src/TableData.js",["97","98","99","100","101","102","103","104","105"],"import React, { useEffect, useState } from 'react';\nimport firebase from 'firebase';\nimport {connect} from 'react-redux'\nimport Spinner from './Spinner/Spinner';\n\nfunction TableData(props) {\n    let [isAuth, setIsAuth] = useState(localStorage.isAuth)\n    const [moviesData, setMoviesData] = useState()\n    // useEffect(() => {\n    //     setMoviesData(props.mov)\n    // }, [props.mov])\n    var config = {\n        apiKey: \"apiKey\",\n        authDomain: \"react-movies-database.firebaseapp.com\",\n        databaseURL: \"https://react-movies-database-default-rtdb.firebaseio.com/\",\n        storageBucket: \"bucket.appspot.com\"\n      };\n\n    if (firebase.apps.length === 0) {\n        firebase.initializeApp(config);\n      }\n    if (props.loading) {\n        return <Spinner/>\n      }\n    // useEffect(() => {\n    //     props.setMoviesDataset(moviesData)\n    // }, [moviesData])\n\n    // moviesData.push({userId: localStorage.userId})\n\n    const onClickHandler = (index, ranked) => {\n        //props.setMovies( arr => ([...arr, arr[index].watched=true], arr.slice(0, props.movies.length)))\n        props.setWatched(index, ranked)\n        props.setDatabase()\n\n        // let path = localStorage.userId\n        // firebase.database().ref(path +\"/\").set(props.mov)\n        // if (!props.loading)\n    }\n    const onUndoHandler= (index, ranked) => {\n        //props.setMovies( arr => ([...arr, arr[index].watched=false], arr.slice(0, props.movies.length)))\n        //let path = localStorage.userId\n        props.setNotWatched(index, ranked)\n        props.setDatabase()\n    }\n\n    let checkBox = (\n    <div class=\"form-check\">\n        <input class=\"form-check-input\" type=\"radio\" name=\"exampleRadios\" id=\"exampleRadios1\" value={props.mov}  />\n        <label class=\"form-check-label\" for=\"exampleRadios1\">\n        Not Watched\n        </label>\n    </div>\n  )\n  if (!props.searching){\n    return props.mov.slice(props.indexOfFirstPost, props.indexOfLastPost).map((st, index) => {\n        const { ranked, releaseDate, imdbRating, originalTitle, year, watched } = st\n        if(isAuth){return (\n            <tr key={releaseDate}>\n                <td >{ranked}</td>\n                <td>{imdbRating}</td>\n                <td>{originalTitle}</td>\n                <td>{year}</td>\n                <td>{watched ? <a onClick={() => onUndoHandler(index, ranked)}> ✔️ Watched </a> : <a onClick={() => onClickHandler(index, ranked)}>{checkBox}</a>}</td>\n            </tr>\n            \n            )}\n        else return (\n            <tr key={releaseDate}>\n                <td >{index + 1 }</td>\n                <td>{imdbRating}</td>\n                <td>{originalTitle}</td>\n                <td>{year}</td>\n            </tr>\n            )\n    })\n    }\n  else {\n    return props.filtered.map((st, index) => {\n        const { ranked, releaseDate, imdbRating, originalTitle, year, watched } = st\n        if(isAuth){return (\n            <tr key={releaseDate}>\n                <td >{ranked}</td>\n                <td>{imdbRating}</td>\n                <td>{originalTitle}</td>\n                <td>{year}</td>\n                <td>{watched ? <a onClick={() => onUndoHandler(index, ranked)}> ✔️ Watched </a> : <a onClick={() => onClickHandler(index, ranked)}>{checkBox}</a>}</td>\n            </tr>\n            \n            )}\n     \n    })\n  }\n}\n\nconst mapStateToProps  = (state) => (\n        {mov: state.movies,\n        loading: state.loading,\n        filtered: state.filteredMovies,\n        searching: state.searching\n        })\n\nconst mapDispatchToProps = dispatch => {\n    return {\n      setWatched: (index, ranked) => \n      dispatch({\n         type: \"WATCHED\",\n         payload: index,\n         ranked: ranked\n      }),\n      setNotWatched: (index, ranked) => dispatch({\n        type: \"NOT_WATCHED\",\n        payload: index,\n        ranked: ranked\n      }),\n    setDatabase: () => dispatch({\n          type: 'DATABASE_SET'\n       })\n}\n}\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TableData); ","/home/boka18/react-movies-database/src/Pagination.js",["106"],"import React, { useState } from 'react'\nimport {connect} from 'react-redux'\n\n\nconst Pagination = (props) => {\n    const pageNumbers = [];\n    const [activePage, setActivePage] = useState(1)\n\n    // const onPageClick = number => {\n    //     props.paginate(number)\n    //     setActivePage(number)\n    // }\n\n    const isActive = number => {\n        if (number === activePage) {\n            return 'active'\n        }\n    }\n\n    for (let i=1; i<= props.totalPages; i++ ) {\n        pageNumbers.push(i)\n    }\n    return (\n        <nav>\n            <ul className='pagination'>\n                {pageNumbers.map((number, index) => (\n                    <li key={number} className={'page-item ' + isActive(number)}>\n                        <button \n                        className={`button pagination-link ${\n                            props.currentPage === index + 1\n                              ? \"is-current\"\n                              : \"\"\n                          }`}\n                          aria-label=\"Page 1\"\n                          onClick={() => props.loadExactPage(index + 1)}\n                          aria-current=\"page\"\n                        >\n                          {index + 1}\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </nav>\n    )\n}\n\nconst mapStateToProps = state => {\n    return {\n        countPerPage: state.countPerPage,\n        currentCount: state.currentCount,\n        currentPage: state.currentPage,\n        filteredPages: state.filteredPages,\n        totalCount: state.totalCount,\n        totalPages: state.totalPages,\n    }\n}\n\nconst mapDispatchToProps = dispatch =>{\n    return {\n        // loadData: () => dispatch({\n        //     type: \"LOAD_DATA\",\n        //     payload: 1\n        // }),\n        //\n        // nextPage: (page) => \n        //     dispatch({\n        //         type: \"LOAD_NEW_PAGE\",\n        //         payload: page = 1\n        //     }),\n        //\n        // previousPage: (page) =>\n        //     dispatch({\n        //         type: \"LOAD_NEW_PAGE\",\n        //         payload: page = -1\n        //     }),\n        //\n        loadExactPage: (index) => \n        {console.log(index)\n            dispatch({\n                type: \"LOAD_EXACT_PAGE\",\n                payload: index\n            })    \n    }}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Pagination);\n","/home/boka18/react-movies-database/src/PerPageSelector.js",[],{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":3,"column":8,"nodeType":"113","messageId":"114","endLine":3,"endColumn":13},{"ruleId":"111","severity":1,"message":"115","line":15,"column":10,"nodeType":"113","messageId":"114","endLine":15,"endColumn":17},{"ruleId":"111","severity":1,"message":"116","line":15,"column":19,"nodeType":"113","messageId":"114","endLine":15,"endColumn":29},{"ruleId":"117","severity":1,"message":"118","line":20,"column":5,"nodeType":"119","endLine":20,"endColumn":7,"suggestions":"120"},{"ruleId":"111","severity":1,"message":"115","line":10,"column":8,"nodeType":"113","messageId":"114","endLine":10,"endColumn":15},{"ruleId":"111","severity":1,"message":"121","line":1,"column":83,"nodeType":"113","messageId":"114","endLine":1,"endColumn":92},{"ruleId":"122","severity":1,"message":"123","line":27,"column":1,"nodeType":"124","endLine":230,"endColumn":2},{"ruleId":"125","severity":1,"message":"126","line":73,"column":9,"nodeType":"127","messageId":"128","endLine":98,"endColumn":14},{"ruleId":"125","severity":1,"message":"126","line":99,"column":13,"nodeType":"127","messageId":"128","endLine":103,"endColumn":14},{"ruleId":"111","severity":1,"message":"129","line":1,"column":16,"nodeType":"113","messageId":"114","endLine":1,"endColumn":25},{"ruleId":"111","severity":1,"message":"112","line":2,"column":8,"nodeType":"113","messageId":"114","endLine":2,"endColumn":13},{"ruleId":"111","severity":1,"message":"130","line":5,"column":8,"nodeType":"113","messageId":"114","endLine":5,"endColumn":18},{"ruleId":"111","severity":1,"message":"116","line":17,"column":19,"nodeType":"113","messageId":"114","endLine":17,"endColumn":29},{"ruleId":"111","severity":1,"message":"131","line":19,"column":10,"nodeType":"113","messageId":"114","endLine":19,"endColumn":21},{"ruleId":"111","severity":1,"message":"132","line":19,"column":23,"nodeType":"113","messageId":"114","endLine":19,"endColumn":37},{"ruleId":"111","severity":1,"message":"133","line":21,"column":10,"nodeType":"113","messageId":"114","endLine":21,"endColumn":19},{"ruleId":"111","severity":1,"message":"134","line":21,"column":21,"nodeType":"113","messageId":"114","endLine":21,"endColumn":33},{"ruleId":"111","severity":1,"message":"135","line":3,"column":22,"nodeType":"113","messageId":"114","endLine":3,"endColumn":35},{"ruleId":"111","severity":1,"message":"136","line":3,"column":37,"nodeType":"113","messageId":"114","endLine":3,"endColumn":42},{"ruleId":"111","severity":1,"message":"137","line":3,"column":44,"nodeType":"113","messageId":"114","endLine":3,"endColumn":50},{"ruleId":"111","severity":1,"message":"138","line":3,"column":52,"nodeType":"113","messageId":"114","endLine":3,"endColumn":60},{"ruleId":"111","severity":1,"message":"112","line":4,"column":8,"nodeType":"113","messageId":"114","endLine":4,"endColumn":13},{"ruleId":"111","severity":1,"message":"139","line":10,"column":17,"nodeType":"113","messageId":"114","endLine":10,"endColumn":27},{"ruleId":"111","severity":1,"message":"140","line":11,"column":8,"nodeType":"113","messageId":"114","endLine":11,"endColumn":15},{"ruleId":"111","severity":1,"message":"141","line":13,"column":7,"nodeType":"113","messageId":"114","endLine":13,"endColumn":15},{"ruleId":"111","severity":1,"message":"142","line":14,"column":16,"nodeType":"113","messageId":"114","endLine":14,"endColumn":25},{"ruleId":"117","severity":1,"message":"143","line":29,"column":6,"nodeType":"119","endLine":29,"endColumn":15,"suggestions":"144"},{"ruleId":"111","severity":1,"message":"142","line":6,"column":17,"nodeType":"113","messageId":"114","endLine":6,"endColumn":26},{"ruleId":"111","severity":1,"message":"129","line":1,"column":17,"nodeType":"113","messageId":"114","endLine":1,"endColumn":26},{"ruleId":"111","severity":1,"message":"142","line":7,"column":18,"nodeType":"113","messageId":"114","endLine":7,"endColumn":27},{"ruleId":"111","severity":1,"message":"145","line":8,"column":12,"nodeType":"113","messageId":"114","endLine":8,"endColumn":22},{"ruleId":"111","severity":1,"message":"146","line":8,"column":24,"nodeType":"113","messageId":"114","endLine":8,"endColumn":37},{"ruleId":"147","severity":1,"message":"148","line":64,"column":32,"nodeType":"149","endLine":64,"endColumn":80},{"ruleId":"147","severity":1,"message":"148","line":64,"column":99,"nodeType":"149","endLine":64,"endColumn":148},{"ruleId":"150","severity":1,"message":"151","line":79,"column":43,"nodeType":"152","messageId":"153","endLine":79,"endColumn":45},{"ruleId":"147","severity":1,"message":"148","line":87,"column":32,"nodeType":"149","endLine":87,"endColumn":80},{"ruleId":"147","severity":1,"message":"148","line":87,"column":99,"nodeType":"149","endLine":87,"endColumn":148},{"ruleId":"111","severity":1,"message":"154","line":7,"column":24,"nodeType":"113","messageId":"114","endLine":7,"endColumn":37},"no-native-reassign",["155"],"no-negated-in-lhs",["156"],"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["157"],"'LOAD_DATA' is defined but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'useEffect' is defined but never used.","'Navigation' is defined but never used.","'currentPage' is assigned a value but never used.","'setCurrentPage' is assigned a value but never used.","'ascending' is assigned a value but never used.","'setAscending' is assigned a value but never used.","'BrowserRouter' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'Redirect' is defined but never used.","'setKeyword' is assigned a value but never used.","'newData' is assigned a value but never used.","'isSignUp' is assigned a value but never used.","'setIsAuth' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.movies'. Either include it or remove the dependency array. If 'setNewData' needs the current value of 'props.movies', you can also switch to useReducer instead of useState and read 'props.movies' in the reducer.",["158"],"'moviesData' is assigned a value but never used.","'setMoviesData' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'setActivePage' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},"Update the dependencies array to be: [props]",{"range":"163","text":"164"},"Update the dependencies array to be: [keyword, props.movies]",{"range":"165","text":"166"},[566,568],"[props]",[1085,1094],"[keyword, props.movies]"]