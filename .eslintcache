[{"C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\index.js":"1","C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\redux\\reducer.js":"2","C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\App.js":"3","C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\redux\\types.js":"4","C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\redux\\actions.js":"5","C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\Spinner\\Spinner.js":"6","C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\firebase\\config.js":"7","C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\SignIn\\Auth.js":"8","C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\Navigation\\Navigation.js":"9","C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\SignIn\\SignInCard.js":"10","C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\Navigation\\Pagination.js":"11","C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\Navigation\\PerPageSelector.js":"12","C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\Table\\Table.js":"13","C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\Table\\TableHeader.js":"14","C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\Table\\TableData.js":"15"},{"size":1102,"mtime":1612279184926,"results":"16","hashOfConfig":"17"},{"size":7105,"mtime":1612221543448,"results":"18","hashOfConfig":"17"},{"size":660,"mtime":1612193181205,"results":"19","hashOfConfig":"17"},{"size":575,"mtime":1612221318273,"results":"20","hashOfConfig":"17"},{"size":2128,"mtime":1612275997033,"results":"21","hashOfConfig":"17"},{"size":159,"mtime":1610998435474,"results":"22","hashOfConfig":"17"},{"size":456,"mtime":1612269595293,"results":"23","hashOfConfig":"17"},{"size":290,"mtime":1612270886954,"results":"24","hashOfConfig":"17"},{"size":2141,"mtime":1612276372829,"results":"25","hashOfConfig":"17"},{"size":5820,"mtime":1612279420019,"results":"26","hashOfConfig":"17"},{"size":1554,"mtime":1612193186508,"results":"27","hashOfConfig":"17"},{"size":1299,"mtime":1612193186022,"results":"28","hashOfConfig":"17"},{"size":732,"mtime":1612276282846,"results":"29","hashOfConfig":"17"},{"size":1194,"mtime":1612193266704,"results":"30","hashOfConfig":"17"},{"size":1602,"mtime":1612194672581,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"jvzcag",{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"37"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"37"},"C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\index.js",[],"C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\redux\\reducer.js",["66"],"import { GET_MOVIES, WATCHED, FILTER_BY_VALUE, DATABASE_SET, SORT_BY, LOAD_EXACT_PAGE, MOVIES_PER_PAGE, SET_FIRST_NAME } from './types'\r\nimport firebase from 'firebase';\r\nimport { config } from '../firebase/config'\r\n\r\nif (firebase.apps.length === 0) {\r\n    firebase.initializeApp(config);\r\n}\r\n\r\nconst initialState = {\r\n    movies: [],\r\n    filteredMovies: [],\r\n    filteredMoviesInit: [],\r\n    searching: false,\r\n    currentPage: 1,\r\n    countPerPage: '',\r\n    loading: true,\r\n    firstName: '',\r\n    appliedFilters: []\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_MOVIES:\r\n            let getState = Object.assign({}, state)\r\n            getState.movies = action.payload.data.slice(0, action.payload.data.length).map((obj, index)=> ({ ...obj, ranked: index+1 }))\r\n            getState.loading = false\r\n            getState.firstName = action.payload.firstName\r\n            getState.countPerPage = action.payload.countPerPage || 10\r\n            getState.currentCount = getState.countPerPage\r\n            getState.totalCount = action.payload.count\r\n            getState.currentPage = 1\r\n            getState.totalPages = Math.ceil(getState.totalCount / getState.countPerPage)\r\n            getState.filteredPages = Math.ceil(getState.totalCount / getState.countPerPage)\r\n            getState.upperCount = getState.countPerPage * getState.currentPage\r\n            getState.lowerCount = getState.upperCount - getState.countPerPage\r\n            getState.filteredMovies = getState.movies.slice(getState.lowerCount, getState.upperCount)\r\n            console.log(action.payload)\r\n\r\n            return getState\r\n\r\n        case WATCHED:\r\n            let watched = Object.assign({}, state);\r\n            watched.filteredMovies[action.payload].watched = !watched.filteredMovies[action.payload].watched\r\n            for (let i; i < watched.movies.length; i++) {\r\n                if (watched.movies[i].ranked === action.ranked)\r\n                    return watched.movies.watched = !watched.movies.watched\r\n            }\r\n\r\n            return watched\r\n\r\n        case FILTER_BY_VALUE:\r\n            let newState = Object.assign({}, state);\r\n            let value = action.payload.value;\r\n            let filteredMovies = state.movies.filter(movie => {\r\n                return movie.originalTitle.toLowerCase().includes(value)\r\n\r\n            });\r\n            let appliedFilters = state.appliedFilters;\r\n            if (value) {\r\n                newState.searching = true\r\n                newState.filteredMoviesInit = newState.movies.slice(newState.lowerCount, newState.upperCount)\r\n                appliedFilters = addFilterIfNotExists(FILTER_BY_VALUE, appliedFilters);\r\n                newState.filteredMovies = filteredMovies;\r\n                newState.filteredCount = newState.filteredMovies.length;\r\n                newState.filteredPages = Math.ceil(newState.filteredCount / newState.countPerPage);\r\n            } else {\r\n                newState.searching = false\r\n                appliedFilters = removeFilter(FILTER_BY_VALUE, appliedFilters);\r\n                if (appliedFilters.length === 0) {\r\n                    newState.filteredMovies = newState.filteredMoviesInit;\r\n                    newState.filteredCount = newState.filteredMovies.length;\r\n                    newState.filteredPages = Math.ceil(newState.filteredCount / newState.countPerPage);\r\n                }\r\n            }\r\n            return newState;\r\n\r\n        case SORT_BY:\r\n            const sortByAlphabetState = Object.assign({}, state);\r\n            let sortedAlphabetArr = action.order ?\r\n                sortAsc(sortByAlphabetState.filteredMovies, action.item) :\r\n                sortDesc(sortByAlphabetState.filteredMovies, action.item);\r\n            sortByAlphabetState.filteredMovies = sortedAlphabetArr;\r\n            return sortByAlphabetState;\r\n\r\n        case LOAD_EXACT_PAGE:\r\n            const exactPageState = Object.assign({}, state);\r\n            const initMoviesLoad = exactPageState.movies\r\n            const exactPage = action.payload;\r\n            let upperCountExact = exactPageState.countPerPage * exactPage\r\n            let lowerCountExact = upperCountExact - exactPageState.countPerPage;\r\n            let exactMovies = exactPageState.movies.slice(lowerCountExact, upperCountExact);\r\n            exactPageState.filteredMovies = exactMovies;\r\n            exactPageState.currentCount = upperCountExact;\r\n            exactPageState.currentPage = exactPage;\r\n            window.history.pushState({ page: 1 }, \"title 1\", `?page=${exactPageState.currentPage}`);\r\n            exactPageState.movies = initMoviesLoad\r\n\r\n            return exactPageState;\r\n\r\n        case MOVIES_PER_PAGE:\r\n            const moviesPerPageState = Object.assign({}, state)\r\n            const initMoviesMPP = moviesPerPageState.movies\r\n            moviesPerPageState.currentPage = 1\r\n            moviesPerPageState.countPerPage = action.payload\r\n            moviesPerPageState.currentCount = moviesPerPageState.totalCount\r\n            moviesPerPageState.filteredPages = Math.ceil(moviesPerPageState.currentCount / moviesPerPageState.countPerPage)\r\n            moviesPerPageState.totalPages = moviesPerPageState.filteredPages\r\n            let currentPageMPP = moviesPerPageState.currentPage\r\n            let upperCountMPP = moviesPerPageState.countPerPage * currentPageMPP\r\n            let lowerCountMPP = upperCountMPP - moviesPerPageState.countPerPage;\r\n            let exactMPP = moviesPerPageState.movies.slice(lowerCountMPP, upperCountMPP);\r\n            moviesPerPageState.filteredMovies = exactMPP;\r\n            moviesPerPageState.currentCount = upperCountMPP;\r\n            moviesPerPageState.movies = initMoviesMPP\r\n\r\n            return moviesPerPageState\r\n\r\n        case SET_FIRST_NAME:\r\n            const firstNameState = Object.assign({}, state)\r\n            firstNameState.firstName = action.payload\r\n            console.log(firstNameState)\r\n            return firstNameState\r\n\r\n        case DATABASE_SET:\r\n            databaseSet(state.movies)\r\n            return {\r\n                ...state,\r\n            }\r\n       \r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nfunction addFilterIfNotExists(filter, appliedFilters) {\r\n    let index = appliedFilters.indexOf(filter);\r\n    if (index === -1) appliedFilters.push(filter);\r\n\r\n    return appliedFilters;\r\n}\r\n\r\nfunction removeFilter(filter, appliedFilters) {\r\n    let index = appliedFilters.indexOf(filter);\r\n    appliedFilters.splice(index, 1);\r\n    return appliedFilters;\r\n}\r\n\r\nfunction databaseSet(movies) {\r\n    return firebase.database().ref(localStorage.userId + \"/\").update(movies)\r\n}\r\n\r\nfunction sortAsc(arr, field) {\r\n    return arr.sort(function (a, b) {\r\n        if (a[field] > b[field]) {\r\n            return 1;\r\n        }\r\n        if (b[field] > a[field]) {\r\n            return -1;\r\n        }\r\n        return 0;\r\n    })\r\n}\r\n\r\nfunction sortDesc(arr, field) {\r\n    return arr.sort(function (a, b) {\r\n        if (a[field] > b[field]) return -1;\r\n\r\n        if (b[field] > a[field]) return 1;\r\n\r\n        return 0;\r\n    })\r\n}",["67","68"],"C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\App.js",["69"],"import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Spinner from './Spinner/Spinner'\r\nimport Table from './Table/Table';\r\nimport Navigation from './Navigation/Navigation';\r\nimport { getMovies } from './redux/actions'\r\nimport './App.css';\r\n\r\nconst App = _ => {\r\n  const dispatch = useDispatch()\r\n  const loading = useSelector(state => state.loading)\r\n\r\n  useEffect(() => {\r\n    dispatch(getMovies())\r\n  },[])\r\n  \r\n  return <>\r\n        {loading ? <Spinner /> : <>\r\n          <Navigation/>\r\n          <Table/>\r\n        </>}\r\n      </>\r\n}\r\n\r\nexport default App;","C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\redux\\types.js",[],"C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\redux\\actions.js",[],"C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\Spinner\\Spinner.js",[],"C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\firebase\\config.js",[],"C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\SignIn\\Auth.js",[],"C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\Navigation\\Navigation.js",["70"],"C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\SignIn\\SignInCard.js",["71"],"C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\Navigation\\Pagination.js",[],"C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\Navigation\\PerPageSelector.js",[],"C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\Table\\Table.js",[],"C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\Table\\TableHeader.js",[],"C:\\React\\Exercises\\React Movies Database\\react-movies-database\\src\\Table\\TableData.js",["72","73"],"import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setWatched, setDatabase } from '../redux/actions'\r\n\r\nconst TableData = () => {\r\n \r\n  const dispatch = useDispatch()\r\n  const filtered = useSelector(state => (state.filteredMovies))\r\n  const state = useSelector(state => (state)) //filtered is not re-rendering without it\r\n\r\n  const checkBox = (\r\n    <div class=\"form-check\">\r\n      <input class=\"form-check-input\" type=\"radio\" name=\"exampleRadios\" id=\"exampleRadios1\" value={filtered} />\r\n      <label class=\"form-check-label\" for=\"exampleRadios1\">\r\n        Not Watched\r\n          </label>\r\n    </div>)\r\n\r\n  const onClickHandler = (index, ranked) => {\r\n    dispatch(setWatched(index, ranked))\r\n    dispatch(setDatabase())\r\n  }\r\n console.log(state)\r\n  return (\r\n    filtered.map((st, index) => {\r\n      const { ranked, releaseDate, imdbRating, originalTitle, year, watched } = st\r\n      if (localStorage.isAuth) {\r\n        return (\r\n          <tr key={releaseDate}>\r\n            <td >{ranked}</td>\r\n            <td>{imdbRating}</td>\r\n            <td>{originalTitle}</td>\r\n            <td>{year}</td>\r\n            <td>{watched ? <a onClick={() => onClickHandler(index, ranked)}> ✔️ Watched </a> : <a onClick={() => onClickHandler(index, ranked)}>{checkBox}</a>}</td>\r\n          </tr>\r\n  \r\n        )\r\n      }\r\n      else return (\r\n        <tr key={releaseDate}>\r\n          <td >{index + 1}</td>\r\n          <td>{imdbRating}</td>\r\n          <td>{originalTitle}</td>\r\n          <td>{year}</td>\r\n        </tr>\r\n      )\r\n    })\r\n  )\r\n}\r\n\r\nexport default TableData ",{"ruleId":"74","severity":1,"message":"75","line":21,"column":1,"nodeType":"76","endLine":133,"endColumn":2},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":16,"column":5,"nodeType":"83","endLine":16,"endColumn":7,"suggestions":"84"},{"ruleId":"85","severity":1,"message":"86","line":11,"column":9,"nodeType":"87","messageId":"88","endLine":11,"endColumn":18},{"ruleId":"81","severity":1,"message":"82","line":24,"column":6,"nodeType":"83","endLine":24,"endColumn":8,"suggestions":"89"},{"ruleId":"90","severity":1,"message":"91","line":34,"column":28,"nodeType":"92","endLine":34,"endColumn":77},{"ruleId":"90","severity":1,"message":"91","line":34,"column":96,"nodeType":"92","endLine":34,"endColumn":145},"import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","no-native-reassign",["93"],"no-negated-in-lhs",["94"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["95"],"no-unused-vars","'firstName' is assigned a value but never used.","Identifier","unusedVar",["96"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},{"desc":"97","fix":"99"},"Update the dependencies array to be: [dispatch]",{"range":"100","text":"101"},{"range":"102","text":"101"},[507,509],"[dispatch]",[828,830]]