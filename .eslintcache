[{"C:\\React\\react-movies-database-main\\src\\index.js":"1","C:\\React\\react-movies-database-main\\src\\App.js":"2","C:\\React\\react-movies-database-main\\src\\redux\\reducer.js":"3","C:\\React\\react-movies-database-main\\src\\SignIn\\Auth.js":"4","C:\\React\\react-movies-database-main\\src\\redux\\actions.js":"5","C:\\React\\react-movies-database-main\\src\\redux\\types.js":"6","C:\\React\\react-movies-database-main\\src\\Spinner\\Spinner.js":"7","C:\\React\\react-movies-database-main\\src\\firebase\\config.js":"8","C:\\React\\react-movies-database-main\\src\\Navigation\\Pagination.js":"9","C:\\React\\react-movies-database-main\\src\\Navigation\\PerPageSelector.js":"10","C:\\React\\react-movies-database-main\\src\\AddMovie\\AddMovie.js":"11","C:\\React\\react-movies-database-main\\src\\AddMovie\\AddInput.js":"12","C:\\React\\react-movies-database-main\\src\\Table\\MaterialTable.js":"13","C:\\React\\react-movies-database-main\\src\\Navigation\\Navbar.js":"14","C:\\React\\react-movies-database-main\\src\\Navigation\\NavCool.js":"15","C:\\React\\react-movies-database-main\\src\\Table\\TableHeader.js":"16","C:\\React\\react-movies-database-main\\src\\Table\\TableData.js":"17","C:\\React\\react-movies-database-main\\src\\SignIn\\SignInCard.js":"18"},{"size":1398,"mtime":1617978747380,"results":"19","hashOfConfig":"20"},{"size":675,"mtime":1617978747362,"results":"21","hashOfConfig":"20"},{"size":8588,"mtime":1617978747382,"results":"22","hashOfConfig":"20"},{"size":281,"mtime":1617978747368,"results":"23","hashOfConfig":"20"},{"size":2572,"mtime":1617978747381,"results":"24","hashOfConfig":"20"},{"size":611,"mtime":1617978747383,"results":"25","hashOfConfig":"20"},{"size":159,"mtime":1617978747372,"results":"26","hashOfConfig":"20"},{"size":445,"mtime":1612372276242,"results":"27","hashOfConfig":"20"},{"size":1554,"mtime":1617978747366,"results":"28","hashOfConfig":"20"},{"size":1299,"mtime":1617978747366,"results":"29","hashOfConfig":"20"},{"size":1252,"mtime":1617978747360,"results":"30","hashOfConfig":"20"},{"size":2981,"mtime":1617978747359,"results":"31","hashOfConfig":"20"},{"size":6196,"mtime":1617978747374,"results":"32","hashOfConfig":"20"},{"size":2274,"mtime":1617978747365,"results":"33","hashOfConfig":"20"},{"size":9868,"mtime":1617978747363,"results":"34","hashOfConfig":"20"},{"size":1145,"mtime":1617978747378,"results":"35","hashOfConfig":"20"},{"size":1826,"mtime":1617978747377,"results":"36","hashOfConfig":"20"},{"size":5570,"mtime":1617978747370,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ubyny5",{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"43"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"43"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"43"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"43"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"43"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"43"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"43"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"43"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\React\\react-movies-database-main\\src\\index.js",[],"C:\\React\\react-movies-database-main\\src\\App.js",["84"],"import React, { useEffect } from 'react';\r\nimport {BrowserRouter, Route, Switch } from 'react-router-dom'\r\nimport Home from './Home/Home'\r\nimport Auth from './SignIn/Auth'\r\nimport AddMovie from './AddMovie/AddMovie'\r\nimport UserPage from './UserProfile/UserPage';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Spinner from './Spinner/Spinner'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport { getMovies, getUser} from './redux/actions'\r\nimport UpdatePassword from './SignIn/UpdatePassword';\r\n\r\nconst App = () => {\r\nconst dispatch = useDispatch()\r\nconst loading = useSelector(state => state.loading)\r\nconst darkMode = useSelector(state => state.darkMode)\r\nconsole.log(darkMode)\r\n\r\nconsole.warn = console.error = () => {};\r\n\r\n  let mode = darkMode ? '(prefers-color-scheme: dark)' : '(prefers-color-scheme: light)'\r\n  const prefersDarkMode = useMediaQuery(mode)\r\n\r\n  const theme = React.useMemo(\r\n    () =>\r\n      createMuiTheme({\r\n        palette: {\r\n          type: prefersDarkMode ? 'dark' : 'light',\r\n        },\r\n      }),\r\n    [prefersDarkMode],\r\n  );\r\n    useEffect(() => {\r\n        dispatch(getUser())\r\n        dispatch(getMovies())\r\n    }, [])\r\n\r\nreturn (\r\n  loading ? <Spinner/> : <div styles = {{height: '100vh'}}>\r\n  <Paper height=\"100%\">\r\n  <ThemeProvider theme={theme}>\r\n    <CssBaseline/>\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route path={'/auth'} component={Auth} />\r\n        <Route path={'/password'} component={UpdatePassword} />\r\n        <Route path={'/add-movie'} component={AddMovie} />\r\n        <Route path={'/user-page'} component={UserPage} />\r\n        <Route path={'/'} component={Home} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n    </ThemeProvider>\r\n    </Paper>\r\n    </div>\r\n      )\r\n}\r\n\r\nexport default App;\r\n\r\n",["85","86"],"C:\\React\\react-movies-database-main\\src\\redux\\reducer.js",["87","88","89","90"],"import { GET_MOVIES, SET_WATCHED, FILTER_BY_VALUE, RELOAD_MOVIES, SET_USER, SORT_BY, WARNING, CLEAR_WARNING, GET_USER, SET_RATING, SET_UNWATCHED, SET_RECENT, UNSET_RECENT } from './types'\r\n\r\nconst initialState = {\r\n    movies: [],\r\n    filteredMovies: [],\r\n    searching: false,\r\n    currentPage: 1,\r\n    countPerPage: '',\r\n    loading: true,\r\n    firstName: '',\r\n    goToFirstPage:'',\r\n    goToNextPage: '',\r\n    goToLastPage: '',\r\n    appliedFilters: [],\r\n    darkMode: false\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_MOVIES:\r\n            let getState = Object.assign({}, state)\r\n            getState.loading = true\r\n            getState.movies = action.payload.data \r\n            getState.filteredMovies = action.payload.data \r\n            getState.countPerPage = action.payload.countPerPage\r\n            getState.totalCount = action.payload.total\r\n            getState.currentPage = action.payload.currentPage\r\n            getState.totalPages = action.payload.totalPages\r\n            getState.goToFirstPage = action.payload.goToFirstPage\r\n            getState.goToNextPage = action.payload.goToNextPage\r\n            getState.goToLastPage = action.payload.goToLastPage\r\n            getState.loading = false\r\n\r\n            return getState\r\n        \r\n        case RELOAD_MOVIES:\r\n            let reloadState = Object.assign({}, state)\r\n            reloadState.movies = action.payload.data \r\n            reloadState.filteredMovies = action.payload.data \r\n            return reloadState\r\n\r\n        case GET_USER:\r\n            \r\n            let getUserState = Object.assign({}, state)\r\n            console.log(state)\r\n            getUserState.loading = true\r\n            getUserState.firstName = action.payload.firstName\r\n            getUserState.lastName = action.payload.lastName\r\n            getUserState.email = action.payload.email\r\n            getUserState.recent = action.payload.movies.reverse().slice(0, 5)\r\n            getUserState.userId = action.payload.id\r\n            getUserState.themeStyle = {\r\n               background: action.payload.background}\r\n            getUserState.themeColor = action.payload.color\r\n            getUserState.darkMode = action.payload.darkMode\r\n            getUserState.loading = false\r\n\r\n            return getUserState\r\n\r\n        case SET_USER:\r\n            let setUserState = Object.assign({}, state)\r\n            console.log(action.payload)\r\n            setUserState.themeStyle = {\r\n               background: action.payload.background}\r\n            setUserState.themeColor = action.payload.color\r\n            setUserState.darkMode = action.payload.dark_mode\r\n\r\n            return setUserState\r\n\r\n        case SET_RECENT:\r\n            let setRecentMoviesState = Object.assign({}, state)\r\n            for(let i=0; i<setRecentMoviesState.movies.length; i++)\r\n            {   \r\n                if (setRecentMoviesState.movies[i].id === action.payload.id) {\r\n                    setRecentMoviesState.recent.unshift(setRecentMoviesState.movies[i])\r\n                }\r\n            }\r\n            setRecentMoviesState.recent = setRecentMoviesState.recent.slice(0, 5)\r\n\r\n            return setRecentMoviesState\r\n        \r\n        case UNSET_RECENT:\r\n            let unsetRecentMoviesState = Object.assign({}, state)\r\n            unsetRecentMoviesState.recent = action.payload.movies.reverse().slice(0, 5)\r\n            \r\n            return unsetRecentMoviesState\r\n        \r\n        case SET_RATING:\r\n            let setRatingState = Object.assign({}, state)\r\n            for(let i=0; i<setRatingState.filteredMovies.length; i++)\r\n            {\r\n                if (setRatingState.filteredMovies[i].title === action.payload.title){\r\n                    setRatingState.filteredMovies[i].rating = action.payload.rating\r\n                }\r\n            }\r\n\r\n            return setRatingState\r\n\r\n        case SET_WATCHED:\r\n            let watchedState = Object.assign({}, state);\r\n            console.log(watchedState)\r\n            for(let i=0; i<watchedState.filteredMovies.length; i++)\r\n            {\r\n                if (watchedState.filteredMovies[i].title === action.payload.title){\r\n                    watchedState.filteredMovies[i].watched = true\r\n                    watchedState.filteredMovies[i].rating = null\r\n                }\r\n            }\r\n            return watchedState\r\n\r\n        case SET_UNWATCHED:\r\n            let unwatchedState = Object.assign({}, state);\r\n            for(let i=0; i<unwatchedState.filteredMovies.length; i++)\r\n            {\r\n                if (unwatchedState.filteredMovies[i].title === action.payload.title){\r\n                    unwatchedState.filteredMovies[i].watched = false\r\n                    unwatchedState.filteredMovies[i].rating = null\r\n                }\r\n            }\r\n            return unwatchedState\r\n            \r\n        case WARNING:\r\n            let warningState = Object.assign({}, state);\r\n            warningState.warning =  action.payload.type\r\n            warningState.watchedMovie = action.payload.title\r\n\r\n            return warningState\r\n\r\n        case CLEAR_WARNING:\r\n            let clearWarningState = Object.assign({}, state);\r\n            clearWarningState.warning = null\r\n            clearWarningState.watchedMovie = null\r\n\r\n            return clearWarningState\r\n\r\n        case FILTER_BY_VALUE:\r\n            let newState = Object.assign({}, state);\r\n            if (action.payload.value){\r\n            newState.searching = true\r\n            newState.filteredMovies = action.payload.filtered}\r\n            else \r\n            newState.filteredMovies =  newState.movies\r\n            newState.searching = false\r\n\r\n            return newState;\r\n\r\n        // case SORT_BY:\r\n        //     const sortByAlphabetState = Object.assign({}, state);\r\n        //     console.log(action)\r\n        //     console.log(sortByAlphabetState)\r\n        //     let sortedAlphabetArr = action.order ?\r\n        //         sortAsc(sortByAlphabetState.movies, action.item) :\r\n        //         sortDesc(sortByAlphabetState.movies, action.item);\r\n        //     sortByAlphabetState.filteredMovies = sortedAlphabetArr;\r\n        //     return sortByAlphabetState;\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nfunction sortAsc(arr, field) {\r\n    return arr.sort(function (a, b) {\r\n        if (a[field] > b[field]) {\r\n            return 1;\r\n        }\r\n        if (b[field] > a[field]) {\r\n            return -1;\r\n        }\r\n        return 0;\r\n    })\r\n}\r\n\r\nfunction sortDesc(arr, field) {\r\n    return arr.sort(function (a, b) {\r\n        if (a[field] > b[field]) return -1;\r\n\r\n        if (b[field] > a[field]) return 1;\r\n\r\n        return 0;\r\n    })\r\n}","C:\\React\\react-movies-database-main\\src\\SignIn\\Auth.js",[],"C:\\React\\react-movies-database-main\\src\\redux\\actions.js",["91"],"import {GET_MOVIES, SET_RATING, USERS_ERROR, DATE, GET_USER, FILTER_BY_VALUE, SET_USER, RELOAD_MOVIES, WARNING, LOAD_EXACT_PAGE, SORT_BY, CLEAR_WARNING, SET_WATCHED, SET_RECENT, SET_UNWATCHED, UNSET_RECENT} from './types'\r\nimport axios from 'axios'\r\n\r\n\r\n\r\n\r\nexport const getMovies = (pgNumber, perPage) => async dispatch => {\r\n    const request = {\r\n        perPage: perPage,\r\n        userId: localStorage.userId\r\n    }\r\n    try{\r\n    if(localStorage.isAuth){\r\n        axios.post('http://127.0.0.1:8000/api/movies/get?page=' + pgNumber, request)\r\n        .then(response => {\r\n            dispatch({\r\n            type: GET_MOVIES,\r\n            payload: {\r\n                data: response.data.data,\r\n                total: response.data.total,\r\n                currentPage: response.data.current_page,\r\n                totalPages: response.data.last_page,\r\n                countPerPage: response.data.per_page,\r\n                goToFirstPage: response.data.first_page_url,\r\n                goToNextPage: response.data.next_page_url,\r\n                goToLastPage: response.data.last_page_url,\r\n        }\r\n        })\r\n        axios.get('http://127.0.0.1:8000/api/users/' + localStorage.userId)\r\n        .then(response => {\r\n            console.log(response)\r\n            dispatch({\r\n            type: GET_USER,\r\n            payload: {\r\n                firstName: response.data.first_name,\r\n                lastName: response.data.last_name,\r\n                email: response.data.email,\r\n                movies: response.data.movies,\r\n                userId: response.data.id,\r\n                darkMode: response.data.dark_mode,\r\n                color: response.data.color,\r\n                background: response.data.background\r\n                }\r\n            })\r\n        })\r\n    })\r\n}\r\n    else {\r\n        axios.post('http://127.0.0.1:8000/api/movies/get?page=' + pgNumber, request).then(response => {\r\n            console.log(response)\r\n            dispatch({\r\n                type: GET_MOVIES,\r\n                payload: {\r\n                    data: response.data.data,\r\n                    total: response.data.total,\r\n                    currentPage: response.data.current_page,\r\n                    totalPages: response.data.last_page,\r\n                    countPerPage: response.data.per_page,\r\n                    goToFirstPage: response.data.first_page_url,\r\n                    goToNextPage: response.data.next_page_url,\r\n                    goToLastPage: response.data.last_page_url,\r\n                }\r\n            })\r\n        })\r\n    }}\r\ncatch(e){\r\n    dispatch( {\r\n        type: USERS_ERROR,\r\n        payload: console.log(e),\r\n    })\r\n}}\r\n\r\nexport const reloadMovies = (pgNumber, perPage)=> async dispatch =>{\r\n    const request = {\r\n        perPage: perPage,\r\n        userId: localStorage.userId\r\n    }\r\n    axios.post('http://127.0.0.1:8000/api/movies/get?page=' + pgNumber, request)\r\n        .then(response => {\r\n            console.log(response)\r\n            dispatch({\r\n                type: GET_MOVIES,\r\n                payload: {\r\n                    data: response.data.data,\r\n                    total: response.data.total,\r\n                    currentPage: response.data.current_page,\r\n                    totalPages: response.data.last_page,\r\n                    countPerPage: response.data.per_page,\r\n                    goToFirstPage: response.data.first_page_url,\r\n                    goToNextPage: response.data.next_page_url,\r\n                    goToLastPage: response.data.last_page_url,\r\n                }\r\n        })\r\n    })\r\n}\r\n\r\nexport const setPerPage = payload => {\r\n    axios.post('http://127.0.0.1:8000/api/movies/page', {perPage: payload})\r\n    .then(response => {\r\n        console.log(response)\r\n    })\r\n}\r\n\r\nexport const setRatingDatabase = (id, rating, title)=> async dispatch =>{\r\n    const request = {\r\n        movie_id: id,\r\n        user_id: localStorage.userId,\r\n        rating: rating\r\n    }\r\n    axios.post('http://127.0.0.1:8000/api/users/rating', request)\r\n        .then(response => {\r\n            console.log(response)\r\n            dispatch({\r\n            type: SET_RATING,\r\n            payload: {\r\n                id: response.data.id,\r\n                rating: response.data.rating,\r\n                title: title\r\n        }\r\n        })\r\n    })\r\n}\r\n\r\nexport const setWatchedDatabase = (id, title)=> async dispatch =>{\r\n    const request ={\r\n        movie_id: id,\r\n        user_id: localStorage.userId\r\n      }\r\n    axios.post('http://127.0.0.1:8000/api/users/watched', request).then(response=>{\r\n        console.log(response)\r\n        dispatch({\r\n            type: SET_WATCHED,\r\n            payload: {\r\n                id: response.data.id,\r\n                title: title\r\n        }\r\n        })\r\n    })\r\n}\r\n\r\nexport const setUnwatchedDatabase = (id, title) => async dispatch => {\r\n    const request = {\r\n        movie_id: id,\r\n        user_id: localStorage.userId\r\n    }\r\n    axios.post('http://127.0.0.1:8000/api/users/watched_delete', request).then(response => {\r\n        dispatch({\r\n            type: SET_UNWATCHED,\r\n            payload: {\r\n                id: response.data.id,\r\n                title: title\r\n            }\r\n        })\r\n        axios.get('http://127.0.0.1:8000/api/users/' + localStorage.userId)\r\n            .then(response => {\r\n                console.log(response)\r\n                dispatch({\r\n                    type: UNSET_RECENT,\r\n                    payload: {\r\n                        movies: response.data.movies,\r\n                    }\r\n                })\r\n            })\r\n    })\r\n\r\n}\r\n\r\nexport const setRecent = (id, title) =>{\r\n    return dispatch => dispatch({\r\n            type: SET_RECENT,\r\n            payload: {\r\n                id: id,\r\n                title: title\r\n        }\r\n        })\r\n}\r\n\r\nexport const getUser = () => async dispatch  => {\r\n    try{\r\n        if(localStorage.isAuth){\r\n        axios.get('http://127.0.0.1:8000/api/users/' + localStorage.userId)\r\n        .then(response => {\r\n            dispatch({\r\n            type: GET_USER,\r\n            payload: {\r\n                firstName: response.data.first_name,\r\n                lastName: response.data.last_name,\r\n                movies: response.data.movies,\r\n                email: response.data.email,\r\n                userId: response.data.id,\r\n                darkMode: response.data.dark_mode,\r\n                color: response.data.color,\r\n                background: response.data.background\r\n            }\r\n        })\r\n    })\r\n}\r\nelse {\r\n    axios.get('http://127.0.0.1:8000/api/users/' + localStorage.userId)\r\n    .then(response => {\r\n        dispatch({\r\n            type: GET_USER,\r\n            payload: response.data\r\n        })\r\n    })\r\n}}\r\ncatch(e){\r\n   console.log(e)\r\n    }\r\n}\r\n\r\n\r\nexport const setUser= (payload) =>{\r\n    console.log(payload)\r\n    axios.put('http://127.0.0.1:8000/api/users/' + localStorage.userId, payload)\r\n    .then(response=>console.log(response))\r\n    return dispatch => dispatch({\r\n        type: SET_USER,\r\n        payload\r\n    })\r\n}\r\n\r\nexport const warning = (type, title) =>{\r\n    console.log(title)\r\n    return dispatch => dispatch({\r\n        type: WARNING,\r\n        payload:{\r\n            type: type,\r\n            title: title\r\n        }\r\n    })\r\n}\r\n\r\nexport const clearWarning = () =>{\r\n    return dispatch => dispatch({\r\n        type: CLEAR_WARNING,\r\n    })\r\n}\r\n\r\nexport const filterByValue = payload => ({\r\n    type: FILTER_BY_VALUE,\r\n    payload\r\n});\r\n\r\nexport const sortBy = (item, order) => {\r\n     return dispatch => dispatch({\r\n         type: SORT_BY,\r\n         item: item,\r\n         order: order\r\n        })\r\n    }\r\n\r\nexport const loadExactPage = pgNumber => {\r\n    return dispatch => {\r\n        dispatch({\r\n        type: LOAD_EXACT_PAGE,\r\n        payload: pgNumber\r\n    })}\r\n}\r\n\r\n\r\n\r\n// export const setFirstName = firstName => {\r\n//     return dispatch =>{\r\n//         dispatch({\r\n//             type: SET_FIRST_NAME,\r\n//             payload: firstName\r\n//         })\r\n//     }\r\n// }\r\n\r\nexport const addNewMovie = newMovie => {\r\n    const movie = {\r\n        title: newMovie.originalTitle,\r\n        imdbRating: newMovie.imdbRating,\r\n        year: newMovie.year\r\n\r\n    }\r\n    return axios.post('http://127.0.0.1:8000/api/movies', movie)\r\n    .then(response=>{\r\n        const actors = {\r\n            firstActor: newMovie.firstActor,\r\n            secondActor: newMovie.secondActor,\r\n            thirdActor: newMovie.thirdActor,\r\n            type: 'Movie',\r\n            id: response.id\r\n        }\r\n        axios.post('http://127.0.0.1:8000/api/actors', actors)\r\n        .then(response=>console.log(response))\r\n    })\r\n}\r\n\r\nexport const userBirthday = date => {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: DATE,\r\n            date\r\n        })\r\n    }\r\n}","C:\\React\\react-movies-database-main\\src\\redux\\types.js",[],"C:\\React\\react-movies-database-main\\src\\Spinner\\Spinner.js",[],"C:\\React\\react-movies-database-main\\src\\firebase\\config.js",[],"C:\\React\\react-movies-database-main\\src\\Navigation\\Pagination.js",["92","93"],"import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { loadExactPage, getMovies } from '../redux/actions'\nimport \"bulma/css/bulma.min.css\"\n\nconst Pagination = () => {\n    const dispatch = useDispatch()\n    const currentPage = useSelector(state => state.currentPage)\n    const countPerPage = useSelector(state => state.countPerPage)\n    const totalPages = useSelector(state => state.totalPages)\n    const searching = useSelector(state =>state.searching)\n    const themeColor = useSelector(state => state.themeColor)\n    const pageNumbers = [];\n\n\n    const isActive = number => {\n        if (number === currentPage) {\n            return 'active'\n        }\n    }\n\n\n    for (let i=1; i<= totalPages; i++ ) {\n        pageNumbers.push(i)\n    }\n    return (\n        !searching ? <nav>\n            <ul className='pagination is-small'>\n                {pageNumbers.map((number, index) => (\n                    <li key={number} className={'page-item ' + isActive(number, countPerPage)}>\n                        <button \n                        className={`button pagination-link ${\n                            currentPage === index + 1\n                              ? themeColor===\"red\" ? \"is-danger\" :  themeColor===\"green\" ? \"is-success\" : \"is-current\"\n                              : \"\"\n                          }`}\n                          aria-label=\"Page 1\"\n                          onClick={() => dispatch(getMovies(number, countPerPage))}\n                          aria-current=\"stole\"\n                        >\n                          {number}\n                        </button>\n                    </li>\n                ))}\n            </ul>\n        </nav> : null\n    )\n}\n\nexport default Pagination\n","C:\\React\\react-movies-database-main\\src\\Navigation\\PerPageSelector.js",["94","95"],"import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getMovies, setPerPage } from '../redux/actions'\nimport \"bulma/css/bulma.min.css\"\n\nconst PerPageSelector = () => {\n  const countPerPage = useSelector(state => state.countPerPage)\n  const currentPage = useSelector(state => state.currentPage)\n  const totalCount = useSelector(state => state.totalCount)\n  const filtered = useSelector(state => state.movies)\n  const searching = useSelector(state =>state.searching)\n  const dispatch = useDispatch()\n\n  if(!searching){\n    return (\n      <div class=\"select mt-2 is-small\">\n      <select value={countPerPage} onChange={event => dispatch(getMovies(1, parseInt(event.target.value)))} >\n          {\n            [10, 25, 50, 100, totalCount].map(pageSize => (\n              <option key={pageSize} value={pageSize}>\n                Show: {pageSize}\n              </option>\n            ))\n          }\n        </select>\n      </div>\n      )\n      }\n      else {\n        return (\n          <select value={filtered.length} onChange={event => dispatch(getMovies(1, parseInt(event.target.value)))} >\n          {\n              <option key={filtered.length} value={filtered.length}>\n                Show: {filtered.length}\n              </option>\n          }\n        </select>\n        )\n  }\n\n}\n\nexport default PerPageSelector;","C:\\React\\react-movies-database-main\\src\\AddMovie\\AddMovie.js",["96","97","98"],"import React, { useEffect } from 'react';\r\nimport { Redirect } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getMovies, getDarkMode, getUser } from '../redux/actions'\r\nimport \"bulma/css/bulma.min.css\"\r\nimport Navbar from '../Navigation/Navbar';\r\nimport AddInput from './AddInput'\r\nimport MaterialTable from '../Table/MaterialTable';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nconst AddMovie = () => {\r\n    const state = useSelector(state => state)// in order for re-rendering of the table to work\r\n    const themeColor = useSelector(state => state.themeColor)\r\n    const dispatch = useDispatch()\r\n    \r\n    useEffect(() => {\r\n        dispatch(getUser())\r\n        dispatch(getMovies())\r\n    }, [])\r\n\r\n    return (\r\n        localStorage.isAuth ?\r\n            <div style={{ padding: \"3%\" }}>\r\n                <Navbar />\r\n                <div style={{\r\n                    textAlign: 'center',\r\n                    margin: 'auto',\r\n                    width: '80%',\r\n                    padding: '10px'\r\n                }}>\r\n                    <Box mt={+1}>\r\n                        <AddInput />\r\n                    </Box>\r\n                    <Box mt={+8} >\r\n                    <div style={{ border: themeColor==='red' ? '2px solid red ' : themeColor==='blue' ? '2px solid darkblue ' :  '2px solid green ' }}>\r\n                            <MaterialTable />\r\n                        </div>\r\n                    </Box>\r\n                </div> </div> : <Redirect to={'/auth'} />\r\n    )\r\n}\r\n\r\nexport default AddMovie;","C:\\React\\react-movies-database-main\\src\\AddMovie\\AddInput.js",["99","100","101"],"import React, { useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Box from '@material-ui/core/Box';\r\nimport Select from '@material-ui/core/Select';\r\nimport { useDispatch} from 'react-redux';\r\nimport { addNewMovie } from '../redux/actions'\r\nimport Button from '@material-ui/core/Button';\r\nimport PropTypes from 'prop-types';\r\nimport axios from 'axios';\r\nimport qs from 'qs';\r\n\r\nconst AddInput = () => {\r\n  const dispatch = useDispatch()\r\n\r\n  let [newMovie, setNewMovie] = useState({\r\n    actors: ['Stojanco Sarafimov', 'Stoci'],\r\n    imdbRating: '',\r\n    originalTitle: '',\r\n    year: '',\r\n   //watched: null\r\n  })\r\n\r\n  const addMovieRating = (event) => {\r\n    setNewMovie({\r\n      ...newMovie,\r\n      imdbRating: event.target.value\r\n    })\r\n  }\r\n  const addMovieTitle = (event) => {\r\n    setNewMovie({\r\n      ...newMovie,\r\n      originalTitle: event.target.value\r\n    })\r\n  }\r\n  const addMovieYear = (event) => {\r\n    setNewMovie({\r\n      ...newMovie,\r\n      year: event.target.value\r\n    })\r\n  }\r\n  const addFirstMainActor = (event) => {\r\n    setNewMovie({\r\n      ...newMovie,\r\n      firstActor: event.target.value\r\n    })\r\n  }\r\n  const addSecondMainActor = (event) => {\r\n    setNewMovie({\r\n      ...newMovie,\r\n      secondActor: event.target.value\r\n    })\r\n  }\r\n  const addThirdMainActor = (event) => {\r\n    setNewMovie({\r\n      ...newMovie,\r\n      thirdActor: event.target.value\r\n    })\r\n  }\r\n  const inputNewMovie = () => {\r\n    const movie = {\r\n      title: newMovie.originalTitle,\r\n      imdbRating: newMovie.imdbRating,\r\n      year: newMovie.year\r\n  }\r\n  // axios({\r\n  //   method: 'post',\r\n  //   url: 'http://127.0.0.1:8000/api/movies',\r\n  //   data: qs.stringify({\r\n  //     title: newMovie.originalTitle,\r\n  //     imdbRating: newMovie.imdbRating,\r\n  //     year: newMovie.year,\r\n  //   }),\r\n  //   headers: {\r\n  //     'content-type': 'application/x-www-form-urlencoded;charset=utf-8'\r\n  //   }\r\n  // })\r\n  axios.post('http://127.0.0.1:8000/api/movies', movie)\r\n  .then(response=>{\r\n    const id= response.data.id\r\n      let actors = {\r\n          actor: newMovie.firstActor,\r\n          type: 'Movies',\r\n          id: id\r\n      }\r\n     return axios.post('http://127.0.0.1:8000/api/actors', actors)\r\n       .then(response=>{\r\n         actors = {\r\n          actor: newMovie.secondActor,\r\n          type: 'Movies',\r\n          id: id\r\n      }\r\n     return axios.post('http://127.0.0.1:8000/api/actors', actors)\r\n       .then(response=>{\r\n         actors = {\r\n          actor: newMovie.thirdActor,\r\n          type: 'Movies',\r\n          id: id\r\n      }\r\n     return axios.post('http://127.0.0.1:8000/api/actors', actors)\r\n        })\r\n       })\r\n     })\r\n  }\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n        width: '25ch',\r\n      },\r\n    },\r\n  }));\r\n\r\n  const handleChange = (event) => {\r\n    if (event.target.value === \"Watched\") {\r\n      setNewMovie({\r\n        ...newMovie,\r\n        watched: true\r\n      })\r\n    }\r\n    else {\r\n      setNewMovie({\r\n        ...newMovie,\r\n        watched: false\r\n      })\r\n    }\r\n  }\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box>\r\n      <form className={classes.root} noValidate autoComplete=\"off\">\r\n        <TextField id=\"outlined-basic\" label=\"IMDB Rating...\" variant=\"outlined\" onChange={addMovieRating} />\r\n        <TextField id=\"outlined-basic\" label=\"Movie Title...\" variant=\"outlined\" onChange={addMovieTitle} />\r\n        <TextField id=\"outlined-basic\" label=\"Year...\" variant=\"outlined\" onChange={addMovieYear} />\r\n        <FormControl variant=\"outlined\" className={classes.formControl}>\r\n          <InputLabel id=\"demo-simple-select-outlined-label\">Select Watched...</InputLabel>\r\n          <Select\r\n            labelId=\"demo-simple-select-outlined-label\"\r\n            id=\"demo-simple-select-outlined\"\r\n            onChange={handleChange}\r\n            label=\"Watched\"\r\n          >\r\n            <MenuItem value=\"\">\r\n              <em>None</em>\r\n            </MenuItem>\r\n            <MenuItem value={\"Watched\"}>Watched</MenuItem>\r\n            <MenuItem value={\"Not Watched\"}>Not Watched</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n        <TextField id=\"outlined-basic\" label=\"Main Actors...\" variant=\"outlined\" onChange={addFirstMainActor} />\r\n        <TextField id=\"outlined-basic\" label=\"Main Actors...\" variant=\"outlined\" onChange={addSecondMainActor} />\r\n        <TextField id=\"outlined-basic\" label=\"Main Actors...\" variant=\"outlined\" onChange={addThirdMainActor} />\r\n      </form>\r\n      <Box mt={+2} >\r\n        <Button variant=\"contained\" onClick={inputNewMovie}>Add Movie</Button>\r\n      </Box>\r\n    </Box>\r\n  );\r\n \r\n}\r\nAddInput.propTypes = {\r\n  newMovie: PropTypes.shape({\r\n    originalTitle: PropTypes.string.isRequired,\r\n    imdbRating: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    watched: PropTypes.bool.isRequired\r\n  }).isRequired,\r\n}\r\n\r\nexport default AddInput","C:\\React\\react-movies-database-main\\src\\Table\\MaterialTable.js",["102","103","104","105","106","107","108","109"],"import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, lighten } from '@material-ui/core/styles';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { green } from '@material-ui/core/colors';\r\nimport Box from '@material-ui/core/Box';\r\nimport Rating from '@material-ui/lab/Rating';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { warning, clearWarning, reloadMovies, sortBy, loadExactPage, setUnwatchedDatabase, setRatingDatabase, setWatchedDatabase, setRecent, getMovies, getUser, unsetRecent } from '../redux/actions'\r\nimport axios from 'axios';\r\n\r\nconst useRowStyles = makeStyles({\r\n  root: {\r\n    '& > *': {\r\n      borderBottom: 'unset',\r\n    },\r\n  },\r\n});\r\n\r\nconst GreenCheckbox = withStyles({\r\n  root: {\r\n    color: green[400],\r\n    '&$checked': {\r\n      color: green[600],\r\n    },\r\n  },\r\n  checked: {},\r\n})((props) => <Checkbox color=\"default\" {...props} />);\r\n\r\nconst Row = ({data, index}) => {\r\n  const dispatch = useDispatch()\r\n  const classes = useRowStyles();\r\n  const searching = useSelector(state => state.searching)\r\n  const filtered =useSelector(state => state.filteredMovies)\r\n  const userId = useSelector(state => state.userId)\r\n  const currentPage = useSelector(state=> state.currentPage)\r\n  const perPage = useSelector(state=>state.countPerPage)\r\n  const [rating, setRating] = useState(data.rating)\r\n  const [open, setOpen] = useState(false)\r\n  const [state, setState] = useState({checkedG: true})\r\n\r\n  const handleChange = (event) => {\r\n    setState({ ...state, [event.target.name]: event.target.checked });\r\n  }\r\n  const removeMovieFunction = (id, title) => {\r\n    axios.delete('http://127.0.0.1:8000/api/movies/' + id).then(response=>{\r\n      dispatch(reloadMovies(currentPage, perPage))\r\n      dispatch(warning('delete', title))\r\n      setTimeout(() => {\r\n        dispatch(clearWarning())\r\n      }, 2000)\r\n      }\r\n    )\r\n  }\r\n  const onWatchedHandler = (id, title) => {\r\n    if (!data.watched){\r\n      data.watched = true\r\n      dispatch(setWatchedDatabase(id, title))\r\n      setRating(null)\r\n      dispatch(setRecent(id))\r\n      dispatch(warning('watchedSuccess', title))\r\n      setTimeout(() => {\r\n        dispatch(clearWarning())\r\n      }, 2000)\r\n    }\r\n    else {\r\n      data.watched = false\r\n      setRating(null)\r\n      dispatch(setUnwatchedDatabase(id, title))\r\n    }\r\n  }\r\n\r\n  const onRatingChange = (id, rating, title) => {\r\n    if (data.watched){\r\n      setRating(rating)\r\n      dispatch(setRatingDatabase(id, rating, title))\r\n      dispatch(warning('ratingChange', title))\r\n      setTimeout(() => {\r\n        dispatch(clearWarning())\r\n      }, 2000)\r\n    }\r\n    else {\r\n      dispatch(warning('warning', title))\r\n      setTimeout(() => {\r\n        dispatch(clearWarning(warning))\r\n      }, 2000)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <TableRow className={classes.root}>\r\n        <TableCell>\r\n          <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\r\n            {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n          </IconButton>\r\n        </TableCell>\r\n        <TableCell component=\"th\" scope=\"row\">\r\n          <div style={{ fontSize: '20px' }}>\r\n            {data.title}\r\n          </div>\r\n        </TableCell>\r\n        <TableCell align=\"right\">\r\n          <div style={{ fontSize: '18px' }}>\r\n            {data.year}</div>\r\n        </TableCell>\r\n        <TableCell align=\"right\" >\r\n          <div style={{ fontSize: '20px' }}>\r\n            {data.imdbRating}</div>\r\n        </TableCell>\r\n       {localStorage.isAuth ? <TableCell align=\"right\">\r\n          <FormControlLabel\r\n            control={<GreenCheckbox checked={data.watched} onClick={() => onWatchedHandler(data.id, data.title)} onChange={handleChange} name=\"checkedG\" />}\r\n            label=\"Watched\"\r\n          />\r\n        </TableCell> : null}\r\n        {localStorage.isAuth ? <TableCell align=\"right\">\r\n          <Rating\r\n            value= {data.watched ? rating : null}\r\n            onChange={(e, rating, title) => onRatingChange(data.id, rating, data.title)}\r\n          />\r\n        </TableCell> : null}\r\n        {localStorage.isAuth ? <TableCell align=\"right\">\r\n          <IconButton aria-label=\"delete\" onClick={() => removeMovieFunction(data.id, data.title)}>\r\n            <DeleteIcon fontSize=\"medium\" />\r\n          </IconButton>\r\n        </TableCell>  : null}\r\n      </TableRow>\r\n      <TableRow>\r\n        <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n          <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n            <Box margin={1}>\r\n              <div style={{\r\n                textAlign: 'left',\r\n                fontSize: '20px',\r\n                paddingLeft: '5%'\r\n              }}>\r\n                <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                  Main Actors:\r\n            </Typography>\r\n                <Table size=\"small\" aria-label=\"purchases\">\r\n                  <TableHead>\r\n                    <TableRow>\r\n                      {data.actors.map((actor) =>\r\n                        <li>{actor.name}</li>)\r\n                      }\r\n                    </TableRow>\r\n                  </TableHead>\r\n                  <TableBody>\r\n                  </TableBody>\r\n                </Table>\r\n              </div>\r\n            </Box>\r\n          </Collapse>\r\n        </TableCell>\r\n      </TableRow>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nconst MaterialTable = () => {\r\n  \r\n  const dispatch = useDispatch()\r\n  const themeStyle = useSelector(state => state.themeStyle)\r\n  const searching = useSelector(state => state.searching)\r\n  const currentPage = useSelector(state => state.currentPage)\r\n  const [order, setOrder] = useState(true)\r\n  const filtered =useSelector(state => state.filteredMovies)\r\n  //const updateState = useSelector(state => (state)) //needed for rendering the table after input\r\n  useEffect(()=>{\r\n    dispatch(loadExactPage(currentPage))\r\n  }, [])\r\n  const useToolbarStyles = makeStyles((theme) => ({\r\n    root: {\r\n      paddingLeft: theme.spacing(2),\r\n      paddingRight: theme.spacing(1),\r\n    },\r\n    highlight:\r\n      theme.palette.type === 'light'\r\n        ? {\r\n          color: theme.palette.secondary.main,\r\n          backgroundColor: lighten(theme.palette.secondary.light, 0.85),\r\n        }\r\n        : {\r\n          color: theme.palette.text.primary,\r\n          backgroundColor: theme.palette.secondary.dark,\r\n        },\r\n    title: {\r\n      flex: '1 1 100%',\r\n    },\r\n  }));\r\n  const classes = useToolbarStyles();\r\n\r\n  const sortByInput = (item) => {\r\n    dispatch(sortBy(item, order))\r\n    setOrder(!order)\r\n  }\r\n\r\n  Row.propTypes = {\r\n    row: PropTypes.shape({\r\n      yourRating: PropTypes.number,\r\n      history: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          amount: PropTypes.number.isRequired,\r\n          customerId: PropTypes.string.isRequired,\r\n          date: PropTypes.string.isRequired,\r\n        }),\r\n      ).isRequired,\r\n      originalTitle: PropTypes.string.isRequired,\r\n      imdbRating: PropTypes.number.isRequired,\r\n      year: PropTypes.number.isRequired,\r\n      watched: PropTypes.bool.isRequired\r\n    }).isRequired,\r\n  };\r\n  return (\r\n    <Box>\r\n      <TableContainer component={Paper}>\r\n        <Table size='small' aria-label=\"collapsible table\">\r\n          <TableHead style={themeStyle}>\r\n            <TableRow>\r\n              <TableCell />\r\n              <TableCell>\r\n                <Typography style={{ color: '#FFFFFF' }} className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\"\r\n                  onClick={() => sortByInput('title')}>Movie Title\r\n                </Typography>\r\n              </TableCell>\r\n              <TableCell style={{ color: '#FFFFFF' }} onClick={() => sortByInput('year')} align=\"right\">Year</TableCell>\r\n              <TableCell style={{ color: '#FFFFFF' }} onClick={() => sortByInput('imdbRating')} align=\"right\">IMDB Rating&nbsp;</TableCell>\r\n              {localStorage.isAuth ? <TableCell style={{ color: '#FFFFFF' }} onClick={() => sortByInput('watched')} align=\"right\">Watched&nbsp;</TableCell> : null}\r\n              {localStorage.isAuth ? <TableCell style={{ color: '#FFFFFF' }} onClick={() => sortByInput('rating')} align=\"right\">Your Rating&nbsp;</TableCell> : null}\r\n              {localStorage.isAuth ? <TableCell style={{ color: '#FFFFFF' }} align=\"right\">Remove&nbsp;</TableCell> : null}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {filtered && filtered.length > 0 && filtered.map((st, index) => {\r\n              return st.title && <Row key={index} data={st} index={index} /> \r\n            }\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default MaterialTable;","C:\\React\\react-movies-database-main\\src\\Navigation\\Navbar.js",["110","111","112","113","114","115","116","117","118"],"import React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom'\r\nimport { fade, makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport EmojiPeopleIcon from '@material-ui/icons/EmojiPeople';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport MoreIcon from '@material-ui/icons/MoreVert';\r\nimport Badge from '@material-ui/core/Badge';\r\nimport AccountCircle from '@material-ui/icons/AccountCircle';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { filterByValue, loadExactPage, getUser, getMovies} from '../redux/actions'\r\nimport axios from 'axios'\r\n\r\nconst Navbar = () => {\r\n  const dispatch = useDispatch()\r\n  const [input, setInput] = useState(\"\")\r\n  const currentPage = useSelector(state => state.currentPage)\r\n  const themeStyle = useSelector(state => state.themeStyle)\r\n  const firstName = useSelector(state => state.firstName)\r\n  const [filteredReturn, setFilteredReturn] = useState('');\r\n  let history = useHistory()\r\n  useEffect(() => {\r\n    dispatch(getUser())\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const timer = setTimeout(() => {\r\n      filterByInput(input)\r\n    }, 200);\r\n    return () => clearTimeout(timer);\r\n  }, [input]);\r\n\r\n  const filterByInput = (input) => {\r\n    if (!input) {\r\n      dispatch(getMovies())\r\n    }\r\n  else axios.post('http://127.0.0.1:8000/api/movies/filtered', {filter: input, userId: localStorage.userId}).then(response=>{\r\n   dispatch(filterByValue({ value: input, filtered: response.data }))\r\n  })\r\n  }\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    grow: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      display: 'none',\r\n      padding: '10px',\r\n      [theme.breakpoints.up('sm')]: {\r\n        display: 'block',\r\n      },\r\n    },\r\n    search: {\r\n      position: 'relative',\r\n      borderRadius: theme.shape.borderRadius,\r\n      backgroundColor: fade(theme.palette.common.white, 0.15),\r\n      '&:hover': {\r\n        backgroundColor: fade(theme.palette.common.white, 0.25),\r\n      },\r\n      marginRight: theme.spacing(),\r\n      marginLeft: 0,\r\n      width: '100%',\r\n      [theme.breakpoints.up('sm')]: {\r\n        marginLeft: theme.spacing(3),\r\n        width: 'auto',\r\n      },\r\n    },\r\n    searchIcon: {\r\n      padding: theme.spacing(0, 2),\r\n      height: '100%',\r\n      position: 'absolute',\r\n      pointerEvents: 'none',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    },\r\n    inputRoot: {\r\n      color: 'inherit',\r\n    },\r\n    inputInput: {\r\n      padding: theme.spacing(1, 1, 1, 0),\r\n      // vertical padding + font size from searchIcon\r\n      paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n      transition: theme.transitions.create('width'),\r\n      width: '100%',\r\n      [theme.breakpoints.up('md')]: {\r\n        width: '12ch',\r\n        '&:focus': {\r\n          width: '20ch',\r\n        },\r\n      },\r\n    },\r\n    sectionDesktop: {\r\n      display: 'none',\r\n      [theme.breakpoints.up('md')]: {\r\n        display: 'flex',\r\n      },\r\n    },\r\n    sectionMobile: {\r\n      display: 'flex',\r\n      [theme.breakpoints.up('md')]: {\r\n        display: 'none',\r\n      },\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);\r\n\r\n  const isMenuOpen = Boolean(anchorEl);\r\n  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\r\n\r\n  const handleProfileMenuOpen = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleMobileMenuClose = () => {\r\n    setMobileMoreAnchorEl(null);\r\n  };\r\n\r\n  const handleMenuClose = () => {\r\n    setAnchorEl(null);\r\n    handleMobileMenuClose();\r\n  };\r\n\r\n  const handleMobileMenuOpen = (event) => {\r\n    setMobileMoreAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const goToNewMovies = () => {\r\n    history.push('/add-movie')\r\n  }\r\n\r\n  const goToHomeTable = () => {\r\n    history.push('/')\r\n  }\r\n\r\n  const onLoginHandler = () => {\r\n    history.push('/auth')\r\n  }\r\n\r\n  const onMyAccountHandler = () => {\r\n    history.push('/user-page')\r\n  }\r\n\r\n  const onLogoutHandler = () => {\r\n    localStorage.removeItem('userId')\r\n    localStorage.removeItem('isAuth')\r\n    localStorage.removeItem('firstName')\r\n    history.push('/auth')\r\n  }\r\n\r\n  const menuId = 'primary-search-account-menu';\r\n  const renderMenu = (\r\n    <Menu\r\n      anchorEl={anchorEl}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      id={menuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      open={isMenuOpen}\r\n      onClose={handleMenuClose}\r\n    >\r\n      <MenuItem onClose={handleMenuClose}\r\n        onClick={onMyAccountHandler}>My Account</MenuItem>\r\n      <MenuItem onClose={handleMenuClose}\r\n        onClick={onLogoutHandler}>Logout</MenuItem>\r\n    </Menu>\r\n  );\r\n\r\n  const mobileMenuId = 'primary-search-account-menu-mobile';\r\n  const renderMobileMenu = (\r\n    <Menu\r\n      anchorEl={mobileMoreAnchorEl}\r\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      id={mobileMenuId}\r\n      keepMounted\r\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n      open={isMobileMenuOpen}\r\n      onClose={handleMobileMenuClose}\r\n    >\r\n      <MenuItem onClick={handleProfileMenuOpen}>\r\n        <IconButton\r\n          aria-label=\"account of current user\"\r\n          aria-controls=\"primary-search-account-menu\"\r\n          aria-haspopup=\"true\"\r\n          color=\"inherit\"\r\n        >\r\n          <AccountCircle />\r\n        </IconButton>\r\n        <p>Profile</p>\r\n      </MenuItem>\r\n    </Menu>\r\n  );\r\n\r\n\r\n  return (\r\n    <div className={classes.grow} style={{marginBottom: '50px'}}>\r\n      <AppBar style={themeStyle} position=\"fixed\" >\r\n        <Toolbar>\r\n          <Button color=\"inherit\" edge=\"start\"\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={goToHomeTable}\r\n          >\r\n            Home\r\n              </Button>\r\n          {localStorage.isAuth ? <Button color=\"inherit\" edge=\"start\"\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={goToNewMovies}\r\n          >\r\n            Add Movies\r\n              </Button> : null}\r\n          <div className={classes.grow} />\r\n          <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n               <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Search…\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              inputProps={{ 'aria-label': 'search' }}\r\n              onChange={(e) => setInput(e.target.value.toLowerCase())}\r\n            />\r\n          </div>\r\n          <div className={classes.sectionDesktop}>\r\n            {localStorage.isAuth ? <div>\r\n              <IconButton aria-label=\"show 4 new mails\" color=\"inherit\">\r\n                <div onClick={() => { history.push('/user-page') }}>\r\n                  <AccountCircle size='large' />\r\n                  <Button color=\"inherit\">Profile</Button>\r\n                </div>\r\n              </IconButton>\r\n              <IconButton color=\"inherit\">\r\n                <Badge badgeContent={0} color=\"secondary\">\r\n                  <Button color=\"inherit\" onClick={onLogoutHandler}>Logout</Button>\r\n                </Badge>\r\n              </IconButton>\r\n            </div> :\r\n              <IconButton color=\"inherit\">\r\n                <Badge badgeContent={0} color=\"secondary\">\r\n                  <Button color=\"inherit\" onClick={onLoginHandler}>Login</Button>\r\n                </Badge>\r\n              </IconButton>\r\n            }\r\n          </div>\r\n          <div className={classes.sectionMobile}>\r\n            <IconButton\r\n              aria-label=\"show more\"\r\n              aria-controls={mobileMenuId}\r\n              aria-haspopup=\"true\"\r\n              onClick={handleMobileMenuOpen}\r\n              color=\"inherit\"\r\n            >\r\n              <MoreIcon />\r\n            </IconButton>\r\n            <IconButton\r\n              aria-label=\"show more\"\r\n              aria-controls={mobileMenuId}\r\n              aria-haspopup=\"true\"\r\n              onClick={handleMobileMenuOpen}\r\n              color=\"inherit\"\r\n            >\r\n              {!localStorage.isAuth ? <Button color=\"inherit\" onClick={onLoginHandler}>Login</Button> : <Button color=\"inherit\">Logout <EmojiPeopleIcon size='large' /></Button>}\r\n            </IconButton>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {renderMobileMenu}\r\n      {renderMenu}\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default Navbar;","C:\\React\\react-movies-database-main\\src\\Navigation\\NavCool.js",["119","120","121","122","123"],"C:\\React\\react-movies-database-main\\src\\Table\\TableHeader.js",[],"C:\\React\\react-movies-database-main\\src\\Table\\TableData.js",["124","125","126","127","128"],"C:\\React\\react-movies-database-main\\src\\SignIn\\SignInCard.js",["129","130","131"],{"ruleId":"132","severity":1,"message":"133","line":39,"column":8,"nodeType":"134","endLine":39,"endColumn":10,"suggestions":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","severity":1,"message":"141","line":1,"column":77,"nodeType":"142","messageId":"143","endLine":1,"endColumn":84},{"ruleId":"144","severity":1,"message":"145","line":18,"column":1,"nodeType":"146","endLine":159,"endColumn":2},{"ruleId":"140","severity":1,"message":"147","line":161,"column":10,"nodeType":"142","messageId":"143","endLine":161,"endColumn":17},{"ruleId":"140","severity":1,"message":"148","line":173,"column":10,"nodeType":"142","messageId":"143","endLine":173,"endColumn":18},{"ruleId":"140","severity":1,"message":"149","line":1,"column":89,"nodeType":"142","messageId":"143","endLine":1,"endColumn":102},{"ruleId":"140","severity":1,"message":"150","line":3,"column":10,"nodeType":"142","messageId":"143","endLine":3,"endColumn":23},{"ruleId":"151","severity":1,"message":"152","line":39,"column":27,"nodeType":"153","endLine":39,"endColumn":47},{"ruleId":"140","severity":1,"message":"154","line":3,"column":21,"nodeType":"142","messageId":"143","endLine":3,"endColumn":31},{"ruleId":"140","severity":1,"message":"155","line":8,"column":9,"nodeType":"142","messageId":"143","endLine":8,"endColumn":20},{"ruleId":"140","severity":1,"message":"156","line":4,"column":21,"nodeType":"142","messageId":"143","endLine":4,"endColumn":32},{"ruleId":"140","severity":1,"message":"157","line":12,"column":11,"nodeType":"142","messageId":"143","endLine":12,"endColumn":16},{"ruleId":"132","severity":1,"message":"133","line":19,"column":8,"nodeType":"134","endLine":19,"endColumn":10,"suggestions":"158"},{"ruleId":"140","severity":1,"message":"159","line":10,"column":10,"nodeType":"142","messageId":"143","endLine":10,"endColumn":21},{"ruleId":"140","severity":1,"message":"160","line":14,"column":8,"nodeType":"142","messageId":"143","endLine":14,"endColumn":10},{"ruleId":"140","severity":1,"message":"161","line":17,"column":9,"nodeType":"142","messageId":"143","endLine":17,"endColumn":17},{"ruleId":"140","severity":1,"message":"162","line":24,"column":142,"nodeType":"142","messageId":"143","endLine":24,"endColumn":151},{"ruleId":"140","severity":1,"message":"163","line":24,"column":153,"nodeType":"142","messageId":"143","endLine":24,"endColumn":160},{"ruleId":"140","severity":1,"message":"164","line":24,"column":162,"nodeType":"142","messageId":"143","endLine":24,"endColumn":173},{"ruleId":"140","severity":1,"message":"165","line":48,"column":9,"nodeType":"142","messageId":"143","endLine":48,"endColumn":18},{"ruleId":"140","severity":1,"message":"166","line":49,"column":9,"nodeType":"142","messageId":"143","endLine":49,"endColumn":17},{"ruleId":"140","severity":1,"message":"167","line":50,"column":9,"nodeType":"142","messageId":"143","endLine":50,"endColumn":15},{"ruleId":"140","severity":1,"message":"165","line":180,"column":9,"nodeType":"142","messageId":"143","endLine":180,"endColumn":18},{"ruleId":"132","severity":1,"message":"168","line":187,"column":6,"nodeType":"134","endLine":187,"endColumn":8,"suggestions":"169"},{"ruleId":"140","severity":1,"message":"150","line":17,"column":25,"nodeType":"142","messageId":"143","endLine":17,"endColumn":38},{"ruleId":"140","severity":1,"message":"155","line":23,"column":9,"nodeType":"142","messageId":"143","endLine":23,"endColumn":20},{"ruleId":"140","severity":1,"message":"170","line":25,"column":9,"nodeType":"142","messageId":"143","endLine":25,"endColumn":18},{"ruleId":"140","severity":1,"message":"171","line":26,"column":10,"nodeType":"142","messageId":"143","endLine":26,"endColumn":24},{"ruleId":"140","severity":1,"message":"172","line":26,"column":26,"nodeType":"142","messageId":"143","endLine":26,"endColumn":43},{"ruleId":"132","severity":1,"message":"133","line":30,"column":6,"nodeType":"134","endLine":30,"endColumn":8,"suggestions":"173"},{"ruleId":"132","severity":1,"message":"174","line":37,"column":6,"nodeType":"134","endLine":37,"endColumn":13,"suggestions":"175"},{"ruleId":"176","severity":1,"message":"177","line":213,"column":13,"nodeType":"153","endLine":213,"endColumn":28},{"ruleId":"176","severity":1,"message":"177","line":221,"column":13,"nodeType":"153","endLine":221,"endColumn":28},{"ruleId":"140","severity":1,"message":"178","line":6,"column":8,"nodeType":"142","messageId":"143","endLine":6,"endColumn":18},{"ruleId":"140","severity":1,"message":"179","line":10,"column":8,"nodeType":"142","messageId":"143","endLine":10,"endColumn":16},{"ruleId":"140","severity":1,"message":"180","line":135,"column":13,"nodeType":"142","messageId":"143","endLine":135,"endColumn":27},{"ruleId":"176","severity":1,"message":"177","line":220,"column":17,"nodeType":"153","endLine":220,"endColumn":32},{"ruleId":"176","severity":1,"message":"177","line":228,"column":17,"nodeType":"153","endLine":228,"endColumn":32},{"ruleId":"140","severity":1,"message":"181","line":1,"column":17,"nodeType":"142","messageId":"143","endLine":1,"endColumn":26},{"ruleId":"140","severity":1,"message":"150","line":3,"column":48,"nodeType":"142","messageId":"143","endLine":3,"endColumn":61},{"ruleId":"140","severity":1,"message":"157","line":9,"column":9,"nodeType":"142","messageId":"143","endLine":9,"endColumn":14},{"ruleId":"182","severity":1,"message":"183","line":38,"column":28,"nodeType":"184","endLine":38,"endColumn":77},{"ruleId":"182","severity":1,"message":"183","line":38,"column":96,"nodeType":"184","endLine":38,"endColumn":145},{"ruleId":"132","severity":1,"message":"133","line":22,"column":6,"nodeType":"134","endLine":22,"endColumn":8,"suggestions":"185"},{"ruleId":"182","severity":1,"message":"183","line":130,"column":5,"nodeType":"184","endLine":130,"endColumn":8},{"ruleId":"182","severity":1,"message":"183","line":132,"column":5,"nodeType":"184","endLine":132,"endColumn":8},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["186"],"no-native-reassign",["187"],"no-negated-in-lhs",["188"],"no-unused-vars","'SORT_BY' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'sortAsc' is defined but never used.","'sortDesc' is defined but never used.","'RELOAD_MOVIES' is defined but never used.","'loadExactPage' is defined but never used.","jsx-a11y/aria-proptypes","The value for aria-current must be a single token from the following: page,step,location,date,time,true,false.","JSXAttribute","'setPerPage' is defined but never used.","'currentPage' is assigned a value but never used.","'getDarkMode' is defined but never used.","'state' is assigned a value but never used.",["189"],"'addNewMovie' is defined but never used.","'qs' is defined but never used.","'dispatch' is assigned a value but never used.","'getMovies' is defined but never used.","'getUser' is defined but never used.","'unsetRecent' is defined but never used.","'searching' is assigned a value but never used.","'filtered' is assigned a value but never used.","'userId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'currentPage' and 'dispatch'. Either include them or remove the dependency array.",["190"],"'firstName' is assigned a value but never used.","'filteredReturn' is assigned a value but never used.","'setFilteredReturn' is assigned a value but never used.",["191"],"React Hook useEffect has a missing dependency: 'filterByInput'. Either include it or remove the dependency array.",["192"],"react/jsx-no-duplicate-props","No duplicate props allowed","'Typography' is defined but never used.","'MenuIcon' is defined but never used.","'onLoginHandler' is assigned a value but never used.","'useEffect' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement",["193"],{"desc":"194","fix":"195"},"no-global-assign","no-unsafe-negation",{"desc":"194","fix":"196"},{"desc":"197","fix":"198"},{"desc":"194","fix":"199"},{"desc":"200","fix":"201"},{"desc":"194","fix":"202"},"Update the dependencies array to be: [dispatch]",{"range":"203","text":"204"},{"range":"205","text":"204"},"Update the dependencies array to be: [currentPage, dispatch]",{"range":"206","text":"207"},{"range":"208","text":"204"},"Update the dependencies array to be: [filterByInput, input]",{"range":"209","text":"210"},{"range":"211","text":"204"},[1366,1368],"[dispatch]",[740,742],[6826,6828],"[currentPage, dispatch]",[1387,1389],[1539,1546],"[filterByInput, input]",[740,742]]