[{"C:\\React\\react-movies-database-main\\src\\index.js":"1","C:\\React\\react-movies-database-main\\src\\App.js":"2","C:\\React\\react-movies-database-main\\src\\redux\\reducer.js":"3","C:\\React\\react-movies-database-main\\src\\SignIn\\Auth.js":"4","C:\\React\\react-movies-database-main\\src\\redux\\actions.js":"5","C:\\React\\react-movies-database-main\\src\\redux\\types.js":"6","C:\\React\\react-movies-database-main\\src\\Spinner\\Spinner.js":"7","C:\\React\\react-movies-database-main\\src\\SignIn\\SignInCard.js":"8","C:\\React\\react-movies-database-main\\src\\Table\\Table.js":"9","C:\\React\\react-movies-database-main\\src\\firebase\\config.js":"10","C:\\React\\react-movies-database-main\\src\\Table\\TableHeader.js":"11","C:\\React\\react-movies-database-main\\src\\Navigation\\Pagination.js":"12","C:\\React\\react-movies-database-main\\src\\Table\\TableData.js":"13","C:\\React\\react-movies-database-main\\src\\Navigation\\PerPageSelector.js":"14","C:\\React\\react-movies-database-main\\src\\AddMovie\\AddMovie.js":"15","C:\\React\\react-movies-database-main\\src\\Navigation\\Navigation.js":"16"},{"size":1398,"mtime":1612608056407,"results":"17","hashOfConfig":"18"},{"size":660,"mtime":1612696409967,"results":"19","hashOfConfig":"18"},{"size":8560,"mtime":1612696409972,"results":"20","hashOfConfig":"18"},{"size":290,"mtime":1612696409968,"results":"21","hashOfConfig":"18"},{"size":2551,"mtime":1612696409972,"results":"22","hashOfConfig":"18"},{"size":665,"mtime":1612696409973,"results":"23","hashOfConfig":"18"},{"size":152,"mtime":1612372276049,"results":"24","hashOfConfig":"18"},{"size":5634,"mtime":1612372275977,"results":"25","hashOfConfig":"18"},{"size":703,"mtime":1612656169512,"results":"26","hashOfConfig":"18"},{"size":445,"mtime":1612372276242,"results":"27","hashOfConfig":"18"},{"size":1200,"mtime":1612696409971,"results":"28","hashOfConfig":"18"},{"size":1508,"mtime":1612649920878,"results":"29","hashOfConfig":"18"},{"size":1875,"mtime":1612696409970,"results":"30","hashOfConfig":"18"},{"size":1258,"mtime":1612372275872,"results":"31","hashOfConfig":"18"},{"size":4410,"mtime":1612696409966,"results":"32","hashOfConfig":"18"},{"size":2366,"mtime":1612696409968,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"ubyny5",{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"36"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"36"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"36"},"C:\\React\\react-movies-database-main\\src\\index.js",[],["74","75"],"C:\\React\\react-movies-database-main\\src\\App.js",["76"],"import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Spinner from './Spinner/Spinner'\nimport Table from './Table/Table';\nimport { getMovies } from './redux/actions'\nimport './App.css';\nimport Navbar from './Navigation/Navbar';\n\nconst App = _ => {\n  const dispatch = useDispatch()\n  const loading = useSelector(state => state.loading)\n\n  useEffect(() => {\n    dispatch(getMovies())\n  },[])\n  \n  return <>\n        {loading ? <Spinner /> : <>\n          <Navbar/>\n          <Table/>\n        </>}\n      </>\n}\n\nexport default App;","C:\\React\\react-movies-database-main\\src\\redux\\reducer.js",["77","78"],"import { GET_MOVIES, WATCHED, FILTER_BY_VALUE, DATABASE_SET, SORT_BY, LOAD_EXACT_PAGE, MOVIES_PER_PAGE, SET_FIRST_NAME, SET_NEW_MOVIE, REMOVE_MOVIE } from './types'\r\nimport firebase from 'firebase';\r\nimport { act } from 'react-dom/test-utils';\r\n\r\nconst initialState = {\r\n    movies: [],\r\n    filteredMovies: [],\r\n    filteredMoviesInit: [],\r\n    searching: false,\r\n    currentPage: 1,\r\n    countPerPage: '',\r\n    loading: true,\r\n    firstName: '',\r\n    appliedFilters: []\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n    switch (action.type) {\r\n        case GET_MOVIES:\r\n            let getState = Object.assign({}, state)\r\n            getState.movies = action.payload.data.slice(0, action.payload.data.length).map((obj, index)=> ({ ...obj, ranked: index+1 }))\r\n            getState.loading = false\r\n            getState.firstName = action.payload.firstName\r\n            getState.countPerPage = action.payload.countPerPage || 10\r\n            getState.currentCount = getState.countPerPage\r\n            getState.totalCount = action.payload.count\r\n            getState.currentPage = 1\r\n            getState.totalPages = Math.ceil(getState.totalCount / getState.countPerPage)\r\n            getState.filteredPages = Math.ceil(getState.totalCount / getState.countPerPage)\r\n            getState.upperCount = getState.countPerPage * getState.currentPage\r\n            getState.lowerCount = getState.upperCount - getState.countPerPage\r\n            getState.filteredMovies = getState.movies.slice(getState.lowerCount, getState.upperCount)\r\n            console.log(action.payload)\r\n\r\n            return getState\r\n\r\n        case WATCHED:\r\n            let watched = Object.assign({}, state);\r\n            watched.filteredMovies[action.payload].watched = !watched.filteredMovies[action.payload].watched\r\n            for (let i; i < watched.movies.length; i++) {\r\n                if (watched.movies[i].ranked === action.ranked)\r\n                    return watched.movies.watched = !watched.movies.watched\r\n            }\r\n\r\n            return watched\r\n\r\n        case FILTER_BY_VALUE:\r\n            let newState = Object.assign({}, state);\r\n            let value = action.payload.value;\r\n            console.log(value)\r\n            let filteredMovies = newState.movies.filter(movie => {\r\n                return movie.originalTitle.toLowerCase().includes(value)\r\n\r\n            });\r\n            let appliedFilters = state.appliedFilters;\r\n            if (value) {\r\n                newState.searching = true\r\n                newState.filteredMoviesInit = newState.movies.slice(newState.lowerCount, newState.upperCount)\r\n                appliedFilters = addFilterIfNotExists(FILTER_BY_VALUE, appliedFilters);\r\n                newState.filteredMovies = filteredMovies;\r\n                newState.filteredCount = newState.filteredMovies.length;\r\n                newState.filteredPages = Math.ceil(newState.filteredCount / newState.countPerPage);\r\n            } else {\r\n                newState.searching = false\r\n                appliedFilters = removeFilter(FILTER_BY_VALUE, appliedFilters);\r\n                if (appliedFilters.length === 0) {\r\n                    newState.filteredMovies = newState.movies.slice(newState.lowerCount, newState.upperCount);\r\n                    newState.filteredCount = newState.filteredMovies.length;\r\n                    newState.filteredPages = Math.ceil(newState.filteredCount / newState.countPerPage);\r\n                }\r\n            }\r\n            return newState;\r\n\r\n        case SORT_BY:\r\n            const sortByAlphabetState = Object.assign({}, state);\r\n            let sortedAlphabetArr = action.order ?\r\n                sortAsc(sortByAlphabetState.filteredMovies, action.item) :\r\n                sortDesc(sortByAlphabetState.filteredMovies, action.item);\r\n            sortByAlphabetState.filteredMovies = sortedAlphabetArr;\r\n            return sortByAlphabetState;\r\n\r\n        case LOAD_EXACT_PAGE:\r\n            const exactPageState = Object.assign({}, state);\r\n            const initMoviesLoad = exactPageState.movies\r\n            const exactPage = action.payload;\r\n            let upperCountExact = exactPageState.countPerPage * exactPage\r\n            let lowerCountExact = upperCountExact - exactPageState.countPerPage;\r\n            let exactMovies = exactPageState.movies.slice(lowerCountExact, upperCountExact);\r\n            exactPageState.filteredMovies = exactMovies;\r\n            exactPageState.currentCount = upperCountExact;\r\n            exactPageState.currentPage = exactPage;\r\n            exactPageState.searching = false;\r\n            window.history.pushState({ page: 1 }, \"title 1\", `?page=${exactPageState.currentPage}`);\r\n            exactPageState.movies = initMoviesLoad\r\n\r\n            return exactPageState;\r\n\r\n        case MOVIES_PER_PAGE:\r\n            const moviesPerPageState = Object.assign({}, state)\r\n            const initMoviesMPP = moviesPerPageState.movies\r\n            moviesPerPageState.currentPage = 1\r\n            moviesPerPageState.countPerPage = action.payload\r\n            moviesPerPageState.currentCount = moviesPerPageState.totalCount\r\n            moviesPerPageState.filteredPages = Math.ceil(moviesPerPageState.currentCount / moviesPerPageState.countPerPage)\r\n            moviesPerPageState.totalPages = moviesPerPageState.filteredPages\r\n            let currentPageMPP = moviesPerPageState.currentPage\r\n            let upperCountMPP = moviesPerPageState.countPerPage * currentPageMPP\r\n            let lowerCountMPP = upperCountMPP - moviesPerPageState.countPerPage;\r\n            let exactMPP = moviesPerPageState.movies.slice(lowerCountMPP, upperCountMPP);\r\n            moviesPerPageState.filteredMovies = exactMPP;\r\n            moviesPerPageState.currentCount = upperCountMPP;\r\n            moviesPerPageState.lowerCount = lowerCountMPP;\r\n            moviesPerPageState.upperCount = upperCountMPP;\r\n            moviesPerPageState.movies = initMoviesMPP\r\n\r\n            return moviesPerPageState\r\n\r\n        case SET_FIRST_NAME:\r\n            const firstNameState = Object.assign({}, state)\r\n            firstNameState.firstName = action.payload\r\n            console.log(firstNameState)\r\n            return firstNameState\r\n\r\n        case DATABASE_SET:\r\n            databaseSet(state.movies)\r\n            return {\r\n                ...state,\r\n            }\r\n\r\n        case SET_NEW_MOVIE:\r\n            const newMovieState = Object.assign({}, state)\r\n            console.log(action.payload)\r\n            console.log(newMovieState.filteredMovies)\r\n            let newFiltered = newMovieState.filteredMovies\r\n            let newMovies = newMovieState.movies\r\n            newFiltered.unshift(action.payload)\r\n            newMovies.unshift(action.payload)\r\n            newMovieState.filteredMovies = newFiltered\r\n            newMovieState.movies = newMovies\r\n\r\n            return newMovieState\r\n\r\n        case REMOVE_MOVIE:\r\n            const removeMovieState = Object.assign({}, state)\r\n            let removedMovie=''\r\n            let filteredRemoved = removeMovieState.filteredMovies.filter(movie => movie.ranked !== removeMovieState.filteredMovies[action.index].ranked)\r\n            for (let k=0; k < removeMovieState.movies.length; k++){\r\n            if(action.ranked === removeMovieState.movies[k].ranked ){\r\n            removedMovie=removeMovieState.movies.filter(movie => movie !== removeMovieState.movies[k])\r\n        }}\r\n            removeMovieState.movies = removedMovie\r\n            removeMovieState.filteredMovies = filteredRemoved\r\n            console.log(removeMovieState.filteredMovies)\r\n            return removeMovieState\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\nfunction addFilterIfNotExists(filter, appliedFilters) {\r\n    let index = appliedFilters.indexOf(filter);\r\n    if (index === -1) appliedFilters.push(filter);\r\n\r\n    return appliedFilters;\r\n}\r\n\r\nfunction removeFilter(filter, appliedFilters) {\r\n    let index = appliedFilters.indexOf(filter);\r\n    appliedFilters.splice(index, 1);\r\n    return appliedFilters;\r\n}\r\n\r\nfunction databaseSet(movies) {\r\n    return firebase.database().ref(localStorage.userId + \"/\").set(movies)\r\n}\r\n\r\nfunction sortAsc(arr, field) {\r\n    return arr.sort(function (a, b) {\r\n        if (a[field] > b[field]) {\r\n            return 1;\r\n        }\r\n        if (b[field] > a[field]) {\r\n            return -1;\r\n        }\r\n        return 0;\r\n    })\r\n}\r\n\r\nfunction sortDesc(arr, field) {\r\n    return arr.sort(function (a, b) {\r\n        if (a[field] > b[field]) return -1;\r\n\r\n        if (b[field] > a[field]) return 1;\r\n\r\n        return 0;\r\n    })\r\n}","C:\\React\\react-movies-database-main\\src\\SignIn\\Auth.js",[],"C:\\React\\react-movies-database-main\\src\\redux\\actions.js",[],"C:\\React\\react-movies-database-main\\src\\redux\\types.js",[],"C:\\React\\react-movies-database-main\\src\\Spinner\\Spinner.js",[],"C:\\React\\react-movies-database-main\\src\\SignIn\\SignInCard.js",["79"],"import React, { useState, useEffect } from 'react';\nimport { Redirect, useHistory } from \"react-router-dom\";\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport './SignInCard.css'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport firebase from 'firebase';\nimport { useDispatch } from 'react-redux'\nimport { getMovies, setDatabase } from '../redux/actions';\n\nconst SignInCard = () => {\n  const dispatch = useDispatch()\n  let [switchSignIn, setSwitchSignIn] = useState(true)\n  let [email, setEmail] = useState('')\n  let [password, setPassword] = useState('')\n  let [firstName, setFirstName] = useState('')\n  let [errors, setErrors] = useState({\n    email: '',\n    password: ''\n  })\n  let history = useHistory()\n  useEffect(() => {\n    dispatch(getMovies())\n  }, [])\n\n  const emailInputHandler = (event) => {\n    setEmail(event.target.value)\n  }\n  const passwordInputHandler = (event) => {\n    setPassword(event.target.value)\n  }\n  const firstNameInputHandler = (event) => {\n    setFirstName(event.target.value)\n  }\n\n  const validateEmail = (email) => {\n    let isValid = true;\n    if (email) {\n      setErrors({ email: \"\" })\n    }\n    if (typeof email !== \"undefined\") {\n      var pattern = new RegExp(/^((\"[\\w-\\s]+\")|([\\w-]+(?:\\.[\\w-]+)*)|(\"[\\w-\\s]+\")([\\w-]+(?:\\.[\\w-]+)*))(@((?:[\\w-]+\\.)*\\w[\\w-]{0,66})\\.([a-z]{2,6}(?:\\.[a-z]{2})?)$)|(@\\[?((25[0-5]\\.|2[0-4][0-9]\\.|1[0-9]{2}\\.|[0-9]{1,2}\\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\\]?$)/i);\n      if (!pattern.test(email)) {\n        isValid = false;\n        setErrors({ email: \"Please enter a valid Email Address.\" })\n      }\n    }\n    return isValid;\n  }\n\n  const validatePassword = (password) => {\n    let isValid = true;\n    if (password) {\n      setErrors({ password: \"\" })\n    }\n    if (typeof password !== \"undefined\") {\n      var reg = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).{8,32}$/\n      var test = reg.test(password)\n      if (!test) {\n        isValid = false;\n        setErrors({ password: \"Please enter a valid password\" })\n      }\n      return isValid;\n    }\n  }\n  const SwitchSignInHandler = () => {\n    setSwitchSignIn(!switchSignIn)\n  }\n\n  const onSignUpHandler = (event) => {\n    event.preventDefault()\n    validateEmail(email) && validatePassword(password)\n    firebase.auth().createUserWithEmailAndPassword(email, password).then((userCredential) => {\n      var user = firebase.auth().currentUser\n      user.updateProfile({\n        displayName: firstName})\n      dispatch(getMovies())\n      localStorage.setItem('userId', userCredential.user.uid)\n      history.push('/auth')\n      dispatch(setDatabase())\n      setSwitchSignIn(true)\n      firebase.auth().signOut()\n      alert(\"You are signed up succesfully, please Login\")\n    })\n      .catch((error) => {\n        console.log(error)\n      });\n  }\n\n  const onSignInHandler = (event) => {\n    event.preventDefault()\n    dispatch(getMovies())\n    validateEmail(email) && validatePassword(password)\n    var user = firebase.auth().currentUser;\n    if (user) {\n      console.log(\"user is already signed in\")\n      history.push('/home')\n    } \n    else {\n      firebase.auth().signInWithEmailAndPassword(email, password)\n        .then((userCredential) => {\n          console.log(userCredential.user)\n          localStorage.setItem('firstName', userCredential.user.displayName)\n          localStorage.setItem('userId', userCredential.user.uid)\n          localStorage.setItem('isAuth', true)\n          history.push('/home')\n        })\n        .catch((error) => {\n          console.log(error)\n          alert(error)\n        });\n    }\n  }\n\n  let button = !switchSignIn ? (<Button\n    variant=\"primary\"\n    type=\"submit\"\n    onClick={onSignUpHandler}\n  >\n    Sign Up !\n  </Button>) :\n    (\n      <Button\n        variant=\"primary\"\n        type=\"submit\"\n        onClick={onSignInHandler}\n      >\n        Sign In !\n      </Button>)\n\n  let signMessage = switchSignIn ? (\n    <Form.Label>Please Sign In</Form.Label>\n  ) :\n    <Form.Label>Please Sign Up</Form.Label>\n\n  let switchButton = (\n    <button\n      type=\"button\"\n      class=\"btn btn-success\"\n      onClick={SwitchSignInHandler}>Swtich to {!switchSignIn ? 'Sign In' : \"Sign Up\"}</button>\n  )\n\n  let signCard = (\n    <div class='SignInWrapper'>\n      <Form>\n        <Form.Group controlId=\"formBasicEmail\">\n          {signMessage}\n          {!switchSignIn ?\n            <Form.Group controlId=\"formBasicEmail\">\n              <Form.Control\n                type=\"text\"\n                placeholder=\"First Name\"\n                onChange={firstNameInputHandler}\n              />\n            </Form.Group>\n            : null}\n          <Form.Text></Form.Text>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Enter email\"\n            onChange={emailInputHandler}\n          />\n          <div className=\"text-danger\">{errors.email}</div>\n        </Form.Group>\n        <Form.Group controlId=\"formBasicPassword\">\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Password\"\n            onChange={passwordInputHandler}\n          />\n          <div className=\"text-danger\">{errors.password}</div>\n        </Form.Group>\n        <Form.Group controlId=\"formBasicCheckbox\">\n          {switchSignIn ? <Form.Check type=\"checkbox\" label=\"Remember Me\" /> : null}\n        </Form.Group>\n        <Form.Group>{button}</Form.Group>\n        <Form.Group>{switchButton}</Form.Group>\n      </Form>\n    </div>\n  )\n  console.warn = console.error = () => { };\n  return (\n    localStorage.isAuth ? <Redirect to={'/table'} /> : signCard\n  )\n}\n\nexport default SignInCard;","C:\\React\\react-movies-database-main\\src\\Table\\Table.js",[],"C:\\React\\react-movies-database-main\\src\\firebase\\config.js",[],"C:\\React\\react-movies-database-main\\src\\Table\\TableHeader.js",[],"C:\\React\\react-movies-database-main\\src\\Navigation\\Pagination.js",[],["80","81"],"C:\\React\\react-movies-database-main\\src\\Table\\TableData.js",["82","83","84","85","86"],"import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setWatched, setDatabase, removeMovie, loadExactPage } from '../redux/actions'\r\n\r\nconst TableData = () => {\r\n \r\n  const dispatch = useDispatch()\r\n  const filtered = useSelector(state => (state.filteredMovies))\r\n  const state = useSelector(state => (state)) //filtered is not re-rendering without it\r\n\r\n  const checkBox = (\r\n    <div class=\"form-check\">\r\n      <input class=\"form-check-input\" type=\"radio\" name=\"exampleRadios\" id=\"exampleRadios1\" value={filtered} />\r\n      <label class=\"form-check-label\" for=\"exampleRadios1\">\r\n        Not Watched\r\n          </label>\r\n    </div>)\r\n\r\n  const onClickHandler = (index, ranked) => {\r\n    dispatch(setWatched(index, ranked))\r\n    dispatch(setDatabase())\r\n  }\r\n\r\n  const removeMovieFunction = (index, ranked) => {\r\n    dispatch(removeMovie(index, ranked))\r\n    dispatch(setDatabase())\r\n  }\r\n\r\n  return (\r\n    filtered.map((st, index) => {\r\n      const { ranked, releaseDate, imdbRating, originalTitle, year, watched } = st\r\n      if (localStorage.isAuth) {\r\n        return (\r\n          <tr key={releaseDate}>\r\n            {/* <td >{ranked}</td> */}\r\n            <td>{imdbRating}</td>\r\n            <td>{originalTitle}</td>\r\n            <td>{year}</td>\r\n            <td>{watched ? <a onClick={() => onClickHandler(index, ranked)}> ✔️ Watched </a> : <a onClick={() => onClickHandler(index, ranked)}>{checkBox}</a>}</td>\r\n            <td><button class=\"delete\" onClick={() => removeMovieFunction(index, ranked)}></button></td>\r\n          </tr>\r\n  \r\n        )\r\n      }\r\n      else return (\r\n        <tr key={releaseDate}>\r\n          {/* <td >{ranked}</td> */}\r\n          <td>{imdbRating}</td>\r\n          <td>{originalTitle}</td>\r\n          <td>{year}</td>\r\n        </tr>\r\n      )\r\n    })\r\n  )\r\n}\r\n\r\nexport default TableData ","C:\\React\\react-movies-database-main\\src\\Navigation\\PerPageSelector.js",[],"C:\\React\\react-movies-database-main\\src\\AddMovie\\AddMovie.js",["87","88"],"import React, { useState, useEffect } from 'react';\r\nimport { Link, Redirect } from 'react-router-dom'\r\nimport TableHeader from '../Table/TableHeader'\r\nimport TableData from '../Table/TableData'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getMovies, setDatabase, newMovieAddition } from '../redux/actions'\r\nimport \"bulma/css/bulma.min.css\"\r\n\r\n\r\nconst AddMovie = () => {\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        dispatch(getMovies())\r\n    }, [])\r\n\r\n    let [newMovie, setNewMovie] = useState({\r\n        imdbRating: '',\r\n        originalTitle: '',\r\n        year: '',\r\n        watched: false\r\n    })\r\n\r\n    const addMovieRating = (event) => {\r\n        setNewMovie({\r\n            ...newMovie,\r\n            imdbRating: event.target.value\r\n        })\r\n    }\r\n    const addMovieTitle = (event) => {\r\n        setNewMovie({\r\n            ...newMovie,\r\n            originalTitle: event.target.value\r\n        })\r\n    }\r\n    const addMovieYear = (event) => {\r\n        setNewMovie({\r\n            ...newMovie,\r\n            year: event.target.value\r\n        })\r\n    }\r\n    const isWatched = (event) => {\r\n        if (event.target.value === \"Watched\") {\r\n            setNewMovie({\r\n                ...newMovie,\r\n                watched: true\r\n            })\r\n        }\r\n        else {\r\n            setNewMovie({\r\n                ...newMovie,\r\n                watched: false\r\n            })\r\n        }\r\n    }\r\n    const addNewMovie = () => {\r\n        dispatch(newMovieAddition(newMovie))\r\n        dispatch(setDatabase())\r\n    }\r\n    return (\r\n        localStorage.isAuth ?  <div>\r\n            <div class=\"box\">\r\n                <div class=\"columns is-desktop\">\r\n                    <div class=\"column is-offset-1 \">\r\n                        <strong>Add Rating</strong>\r\n                        <input class=\"input is-primary\"\r\n                            type=\"text\" pattern=\"[0-9]*\"\r\n                            placeholder=\"IMDB Rating\"\r\n                            onChange={(event) => addMovieRating(event)}\r\n                        />\r\n                    </div>\r\n                    <div class=\"column\">\r\n                        <strong>Add Title</strong>\r\n                        <input\r\n                            class=\"input is-primary\"\r\n                            type=\"text\"\r\n                            placeholder=\"Movie Title\"\r\n                            onChange={(event) => addMovieTitle(event)}\r\n                        />\r\n                    </div>\r\n                    <div class=\"column\">\r\n                        <strong>Add Year</strong>\r\n                        <input\r\n                            class=\"input is-primary\"\r\n                            type=\"text\" pattern=\"[0-9]*\"\r\n                            placeholder=\"Year\"\r\n                            onChange={(event) => addMovieYear(event)}\r\n                        />\r\n                    </div>\r\n                    <div class=\"column\">\r\n                        <strong>Watched?</strong>\r\n                        <div>\r\n                            <div class=\"select is-success\">\r\n                                <select onChange={(event) => isWatched(event)}>\r\n                                    <option>Not Watched</option>\r\n                                    <option>Watched</option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <button\r\n                    class=\"button is-info is-pulled-right\"\r\n                    onClick={addNewMovie}\r\n                >Add Movie\r\n                </button>\r\n                <Link to=\"/\"> <button\r\n                    type=\"button\"\r\n                    class=\"button is-info\"\r\n                >Back to Full Table</button>\r\n                </Link>\r\n            </div>\r\n            <div class='Wrapper'>\r\n                <h3>Recently Added Movies</h3>\r\n                <table class={\"table table-bordered text-center\"}>\r\n                    <thead class=\"thead-dark\">\r\n                        <TableHeader\r\n                        />\r\n                    </thead>\r\n                    <tbody>\r\n                        <TableData\r\n                        />\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div> : <Redirect to={'/auth'} />\r\n    )\r\n}\r\n\r\nexport default AddMovie;","C:\\React\\react-movies-database-main\\src\\Navigation\\Navigation.js",["89"],"import React, { useEffect } from 'react'\r\nimport {Link} from 'react-router-dom'\r\nimport { useHistory } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { filterByValue, loadExactPage } from '../redux/actions'\r\nimport firebase from 'firebase';\r\nimport \"bulma/css/bulma.min.css\"\r\n\r\nconst Navigation = () => {\r\n  const dispatch = useDispatch()\r\n  const currentPage = useSelector(state => state.currentPage)\r\n  let history = useHistory()\r\n\r\n  const filterByInput = (event) => {\r\n    let input = event.target.value.toLowerCase()\r\n    if(!event.target.value){\r\n      dispatch(loadExactPage(currentPage))}\r\n    dispatch(filterByValue({ value: input }))\r\n  }\r\n\r\n  let searchBar = \r\n    <form class=\"form-inline\">\r\n      <input\r\n        class=\"form-control mr-sm-2\"\r\n        aria-label=\"Search\"\r\n        type=\"text\"\r\n        placeholder=\"Search Title...\"\r\n        onChange={(e) => filterByInput(e)}\r\n      />\r\n    </form>\r\n\r\n  const onLoginHandler = () => {\r\n    history.push('/auth')\r\n  }\r\n\r\n  const onLogoutHandler = () => {\r\n    firebase.auth().signOut()\r\n    localStorage.removeItem('userId')\r\n    localStorage.removeItem('isAuth')\r\n    localStorage.removeItem('firstName')\r\n    history.push('/auth')\r\n  }\r\n\r\n  let loginButton = !localStorage.isAuth ?\r\n  <Link to=\"/auth\"> <button\r\n      type=\"button\"\r\n      class=\"btn btn-outline-success\"\r\n      href=\"/auth\"\r\n      onClick={onLoginHandler}\r\n    > Login </button> </Link> : null\r\n\r\n  let logoutButton =\r\n    <button\r\n      type=\"button\"\r\n      class=\"button is-outlined\"\r\n      href=\"/\"\r\n      onClick={onLogoutHandler}\r\n    >Logout</button>\r\n\r\n\r\n\r\n  return (\r\n    <nav class=\"navbar sticky-top navbar-expand navbar-light bg-light\">\r\n      <a class=\"navbar-brand\" href=\"/\">{localStorage.isAuth ? 'Hi ' + localStorage.firstName : 'RMD'}</a>\r\n      <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul class=\"navbar-nav mr-auto\">\r\n          <li class=\"nav-item active\">\r\n          {localStorage.isAuth ?  <Link to=\"/add-movie\"><button class=\"button is-info\" href=\"/add-movie\">Add New Movies</button></Link>: null}\r\n          </li>\r\n        </ul>\r\n        <form class=\"form-inline my-2\">\r\n          {searchBar}\r\n          {localStorage.isAuth ? logoutButton : loginButton}\r\n        </form>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navigation\r\n",{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":16,"column":5,"nodeType":"96","endLine":16,"endColumn":7,"suggestions":"97"},{"ruleId":"98","severity":1,"message":"99","line":3,"column":10,"nodeType":"100","messageId":"101","endLine":3,"endColumn":13},{"ruleId":"102","severity":1,"message":"103","line":17,"column":1,"nodeType":"104","endLine":158,"endColumn":2},{"ruleId":"94","severity":1,"message":"95","line":24,"column":6,"nodeType":"96","endLine":24,"endColumn":8,"suggestions":"105"},{"ruleId":"90","replacedBy":"106"},{"ruleId":"92","replacedBy":"107"},{"ruleId":"98","severity":1,"message":"108","line":1,"column":17,"nodeType":"100","messageId":"101","endLine":1,"endColumn":26},{"ruleId":"98","severity":1,"message":"109","line":3,"column":48,"nodeType":"100","messageId":"101","endLine":3,"endColumn":61},{"ruleId":"98","severity":1,"message":"110","line":9,"column":9,"nodeType":"100","messageId":"101","endLine":9,"endColumn":14},{"ruleId":"111","severity":1,"message":"112","line":38,"column":28,"nodeType":"113","endLine":38,"endColumn":77},{"ruleId":"111","severity":1,"message":"112","line":38,"column":96,"nodeType":"113","endLine":38,"endColumn":145},{"ruleId":"98","severity":1,"message":"114","line":5,"column":10,"nodeType":"100","messageId":"101","endLine":5,"endColumn":21},{"ruleId":"94","severity":1,"message":"95","line":14,"column":8,"nodeType":"96","endLine":14,"endColumn":10,"suggestions":"115"},{"ruleId":"98","severity":1,"message":"108","line":1,"column":17,"nodeType":"100","messageId":"101","endLine":1,"endColumn":26},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["118"],"no-unused-vars","'act' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration",["119"],["116"],["117"],"'useEffect' is defined but never used.","'loadExactPage' is defined but never used.","'state' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'useSelector' is defined but never used.",["120"],"no-global-assign","no-unsafe-negation",{"desc":"121","fix":"122"},{"desc":"121","fix":"123"},{"desc":"121","fix":"124"},"Update the dependencies array to be: [dispatch]",{"range":"125","text":"126"},{"range":"127","text":"126"},{"range":"128","text":"126"},[484,486],"[dispatch]",[805,807],[491,493]]